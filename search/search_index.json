{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#neuralake-a-simple-platform-for-complex-data","title":"Neuralake: A simple platform for complex data","text":"<p>Neuralake is a simple query interface for multimodal data at any scale. </p> <p>With Neuralake, you can define a catalog, databases, and tables to query any existing data source. Once you've defined your catalog, you can spin up a static site for easy browsing or a read-only API for programmatic access. No running servers or services!</p> <p>The Neuralake client has native, declarative connectors to Delta Lake and Parquet stores. Neuralake also supports defining tables via custom Python functions, so you can connect to any data source!</p> <p>Here's an example catalog:</p>"},{"location":"#key-features","title":"Key features","text":"<ul> <li>Unified interface: Query data across different storage modalities (Parquet, DeltaLake, relational databases)</li> <li>Declarative catalog syntax: Define catalogs in python without running services</li> <li>Catalog site generation: Generate a static site catalog for visual browsing</li> <li>Extensible: Declare tables as custom python functions for querying any data</li> <li>API support: Generate a YAML config for querying with ROAPI</li> <li>Fast: Uses Rust-native libraries such as polars, delta-rs, and Apache DataFusion for performant reads</li> </ul>"},{"location":"#philosophy","title":"Philosophy","text":"<p>Data engineering should be simple. That means:</p> <ol> <li>Scale up and scale down - tools should scale down to a developer's laptop and up to stateless clusters</li> <li>Prioritize local development experience - use composable libraries instead of distributed services</li> <li>Code as a catalog - define tables in code, generate a static site catalog and APIs without running services</li> </ol>"},{"location":"#quick-start","title":"Quick start","text":"<p>Install the latest version with:</p> <pre><code>pip install neuralake\n</code></pre>"},{"location":"#create-a-table-and-catalog","title":"Create a table and catalog","text":"<pre><code>from neuralake.core import (\n    DeltalakeTable,\n    ParquetTable,\n    Filter,\n    Catalog\n)\n\n# Define tables\ncustomers = ParquetTable(\n    name=\"customer\",\n    uri='s3://my-bucket/tpc-h/customer',\n    schema=pa.schema([\n        (\"c_custkey\", pa.int64()),\n        (\"c_name\", pa.string()),\n        (\"c_address\", pa.string()),\n        (\"c_nationkey\", pa.int64()),\n        (\"c_phone\", pa.string()),\n        (\"c_acctbal\", pa.decimal128(12, 2)),\n        (\"c_mktsegment\", pa.string()),\n        (\"c_comment\", pa.string()),\n    ]),\n    docs_filters=[\n        Filter(\"c_custkey\", \"=\", 1),\n        Filter(\"c_mktsegment\", \"=\", \"BUILDING\"),\n    ],\n    unique_columns=['c_custkey'],\n    description=\"\"\"\n    Customer information from the TPC-H benchmark.\n    Contains customer details including name, address, and market segment.\n    \"\"\",\n)\n\norders = DeltalakeTable(\n    name=\"orders\",\n    uri='s3://my-bucket/tpc-h/orders',\n    schema=pa.schema([\n        (\"o_orderkey\", pa.int64()),\n        (\"o_custkey\", pa.int64()),\n        (\"o_orderstatus\", pa.string()),\n        (\"o_totalprice\", pa.decimal128(12, 2)),\n        (\"o_orderdate\", pa.date32()),\n        (\"o_orderpriority\", pa.string()),\n        (\"o_clerk\", pa.string()),\n        (\"o_shippriority\", pa.int32()),\n        (\"o_comment\", pa.string()),\n    ]),\n    docs_filters=[\n        Filter(\"o_custkey\", \"=\", 1),\n        Filter(\"o_orderdate\", \"=\", \"2024-01-01\"),\n    ],\n    unique_columns=['o_orderkey'],\n    description=\"\"\"\n    Order information from the TPC-H benchmark.\n    Contains order details including status, total price, and order date.\n    \"\"\",\n)\n\n# Create a catalog\ndbs = {\n    \"tpc-h\": {\n        \"customer\": customers,\n        \"orders\": orders,\n    }\n}\n\nMyCatalog = Catalog(dbs)\n</code></pre>"},{"location":"#query-the-data","title":"Query the data","text":"<pre><code>&gt;&gt;&gt; from my_catalogs import MyCatalog\n&gt;&gt;&gt; from neuralake.core import Filter\n&gt;&gt;&gt; \n&gt;&gt;&gt; # Get customer information\n&gt;&gt;&gt; customer_data = MyCatalog.db(\"tpc-h\").table(\n...     \"customer\",\n...     (\n...         Filter('c_custkey', '=', 1),\n...         Filter('c_mktsegment', '=', 'BUILDING'),\n...     ),\n... ).collect()\n&gt;&gt;&gt; \n&gt;&gt;&gt; # Get their orders\n&gt;&gt;&gt; order_data = MyCatalog.db(\"tpc-h\").table(\n...     \"orders\",\n...     (\n...         Filter('o_custkey', '=', 1),\n...         Filter('o_orderdate', '&gt;=', '2024-01-01'),\n...     ),\n... ).collect()\n&gt;&gt;&gt; \n&gt;&gt;&gt; print(customer_data)\nshape: (1, 8)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 c_custkey \u2502 c_name     \u2502 c_address  \u2502 c_nationkey\u2502 c_phone   \u2502 c_acctbal  \u2502 c_mktsegment\u2502 c_comment \u2502\n\u2502 ---       \u2502 ---        \u2502 ---        \u2502 ---        \u2502 ---       \u2502 ---        \u2502 ---        \u2502 ---        \u2502\n\u2502 i64       \u2502 str        \u2502 str        \u2502 i64        \u2502 str       \u2502 dec        \u2502 str        \u2502 str        \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1         \u2502 Customer#1 \u2502 Address 1  \u2502 1          \u2502 123-456   \u2502 1000.00    \u2502 BUILDING   \u2502 Comment 1  |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n&gt;&gt;&gt; print(order_data)\nshape: (3, 9)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 o_orderkey\u2502 o_custkey \u2502 o_orderstatus\u2502 o_totalprice\u2502 o_orderdate\u2502 o_orderpriority \u2502 o_clerk   \u2502 o_shippriority  \u2502 o_comment \u2502\n\u2502 ---       \u2502 ---       \u2502 ---          \u2502 ---         \u2502 ---        \u2502 ---             \u2502 ---       \u2502 ---             \u2502 ---       \u2502\n\u2502 i64       \u2502 i64       \u2502 str          \u2502 dec         \u2502 date       \u2502 str             \u2502 str       \u2502 i32             \u2502 str       \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1         \u2502 \u2026         \u2502 \u2026            \u2502 1000.00     \u2502 2024-01-01 \u2502 5-LOW           \u2502 Clerk#1   \u2502 0               \u2502 Order 1   \u2502\n\u2502 2         \u2502 \u2026         \u2502 \u2026            \u2502 2000.00     \u2502 2024-01-02 \u2502 4-NOT SPEC      \u2502 Clerk#2   \u2502 0               \u2502 Order 2   \u2502\n\u2502 3         \u2502 \u2026         \u2502 \u2026            \u2502 3000.00     \u2502 2024-01-03 \u2502 3-MEDIUM        \u2502 Clerk#3   \u2502 0               \u2502 Order 3   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"#about-neuralink","title":"About Neuralink","text":"<p>Neuralake is part of Neuralink's commitment to the open source community. By maintaining free and open source software, we aim to accelerate data engineering and biotechnology. </p> <p>Neuralink is creating a generalized brain interface to restore autonomy to those with unmet medical needs today, and to unlock human potential tomorrow.</p> <p>You don't have to be a brain surgeon to work at Neuralink. We are looking for exceptional individuals from many fields, including software and data engineering. Learn more at neuralink.com/careers.</p>"},{"location":"catalog/","title":"Web Catalog Example","text":"<p>See the example catalog here. This catalog is based off of the TPC-H Decision Support Benchmark.</p>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#installation","title":"Installation","text":"<p>Install the latest version of Neuralake using pip:</p> <pre><code>pip install neuralake\n</code></pre>"},{"location":"getting-started/#basic-usage","title":"Basic Usage","text":""},{"location":"getting-started/#creating-a-table","title":"Creating a Table","text":"<p>Neuralake provides several table types for different data sources. Here's how to create Delta Lake and Parquet tables:</p> <pre><code>from neuralake.core import DeltalakeTable, ParquetTable, Filter\nimport pyarrow as pa\n\n# Define schemas\nsupplier_schema = pa.schema([\n    (\"s_suppkey\", pa.int64()),\n    (\"s_name\", pa.string()),\n    (\"s_address\", pa.string()),\n    (\"s_nationkey\", pa.int64()),\n    (\"s_phone\", pa.string()),\n    (\"s_acctbal\", pa.decimal128(12, 2)),\n    (\"s_comment\", pa.string()),\n])\n\npartsupp_schema = pa.schema([\n    (\"ps_partkey\", pa.int64()),\n    (\"ps_suppkey\", pa.int64()),\n    (\"ps_availqty\", pa.int32()),\n    (\"ps_supplycost\", pa.decimal128(12, 2)),\n    (\"ps_comment\", pa.string()),\n])\n\n# Create a Delta Lake table\nsupplier = DeltalakeTable(\n    name=\"supplier\",\n    uri='s3://my-bucket/tpc-h/supplier',\n    schema=supplier_schema,\n    docs_filters=[\n        Filter(\"s_suppkey\", \"=\", 1),\n        Filter(\"s_nationkey\", \"=\", 1),\n    ],\n    unique_columns=['s_suppkey'],\n    description=\"Supplier information from the TPC-H benchmark.\"\n)\n\n# Create a Parquet table\npartsupp = ParquetTable(\n    name=\"partsupp\",\n    uri='s3://my-bucket/tpc-h/partsupp',\n    schema=partsupp_schema,\n    docs_filters=[\n        Filter(\"ps_suppkey\", \"=\", 1),\n        Filter(\"ps_partkey\", \"=\", 1),\n    ],\n    unique_columns=['ps_partkey', 'ps_suppkey'],\n    description=\"Part supplier relationship information from the TPC-H benchmark.\"\n)\n</code></pre>"},{"location":"getting-started/#creating-a-catalog","title":"Creating a Catalog","text":"<p>A catalog is a collection of tables:</p> <pre><code>from neuralake.core import Catalog\n\n# Create a catalog\ndbs = {\n    \"tpc-h\": {\n        \"supplier\": supplier,\n        \"partsupp\": partsupp,\n    }\n}\n\nMyCatalog = Catalog(dbs)\n</code></pre>"},{"location":"getting-started/#querying-data","title":"Querying Data","text":"<pre><code>from neuralake.core import Filter\nimport polars as pl\n\n# Query and join tables\njoined_data = (\n    MyCatalog.db(\"tpc-h\").table(\"supplier\", Filter('s_suppkey', '=', 1))\n    .join(\n        MyCatalog.db(\"tpc-h\").table(\"partsupp\", Filter('ps_suppkey', '=', 1)),\n        left_on=\"s_suppkey\",\n        right_on=\"ps_suppkey\",\n        how=\"inner\"\n    )\n    .select([\"s_suppkey\", \"s_name\", \"ps_partkey\", \"ps_availqty\"])\n    .collect()\n)\n\nprint(joined_data)\n</code></pre>"},{"location":"getting-started/#generating-documentation","title":"Generating Documentation","text":"<p>Neuralake can generate documentation for your catalog:</p> <pre><code>from neuralake import web_export\n\n# Generate documentation\nweb_export.generate_docs(MyCatalog, output_dir=\"docs\")\n</code></pre>"},{"location":"getting-started/#api-configuration","title":"API Configuration","text":"<p>You can also generate a YAML configuration for ROAPI:</p> <pre><code>from neuralake import roapi_export\n\n# Generate ROAPI config\nroapi_export.generate_config(MyCatalog, output_file=\"roapi-config.yaml\")\n</code></pre>"},{"location":"user-guide/","title":"User Guide","text":""},{"location":"user-guide/#core-concepts","title":"Core concepts","text":""},{"location":"user-guide/#tables","title":"Tables","text":"<p>A table in Neuralake is a Python function that returns an <code>NlkDataFrame</code>. An <code>NlkDataFrame</code> is a thin wrapper of the polars LazyFrame. Tables are the fundamental building blocks for accessing and querying data. Tables can be backed by DeltaLake tables, Parquet tables, or pure Python functions.</p>"},{"location":"user-guide/#deltalake-tables","title":"DeltaLake tables","text":"<pre><code>from neuralake.core.tables import DeltalakeTable\nimport pyarrow as pa\n\n# Define the schema\nschema = pa.schema([\n    (\"s_suppkey\", pa.int64()),\n    (\"s_name\", pa.string()),\n    (\"s_address\", pa.string()),\n    (\"s_nationkey\", pa.int64()),\n    (\"s_phone\", pa.string()),\n    (\"s_acctbal\", pa.decimal128(12, 2)),\n    (\"s_comment\", pa.string()),\n])\n\n# Create the table\nsupplier = DeltalakeTable(\n    name=\"supplier\",\n    uri=\"s3://my-bucket/tpc-h/supplier/\",\n    schema=schema,\n    description=\"Supplier information from the TPC-H benchmark\",\n    unique_columns=[\"s_suppkey\"],\n)\n</code></pre>"},{"location":"user-guide/#parquet-tables","title":"Parquet tables","text":"<pre><code>from neuralake.core.tables import ParquetTable, Partition, PartitioningScheme\nimport pyarrow as pa\n\n# Define the schema\nschema = pa.schema([\n    (\"ps_partkey\", pa.int64()),\n    (\"ps_suppkey\", pa.int64()),\n    (\"ps_availqty\", pa.int32()),\n    (\"ps_supplycost\", pa.decimal128(12, 2)),\n    (\"ps_comment\", pa.string()),\n])\n\n# Create the table\npartsupp = ParquetTable(\n    name=\"partsupp\",\n    uri=\"s3://my-bucket/tpc-h/partsupp\",\n    schema=schema,\n    description=\"Part supplier relationship information from the TPC-H benchmark\",\n)\n</code></pre>"},{"location":"user-guide/#function-tables","title":"Function tables","text":"<p>Function tables are created using the <code>@table</code> decorator and allow you to define custom data access logic:</p> <pre><code>from neuralake.core.tables import table\nimport polars as pl\n\n@table\ndef supplier_sample() -&gt; NlkDataFrame:\n    \"\"\"A custom table that returns sample supplier data.\"\"\"\n    data = {\n        \"s_suppkey\": [1, 2, 3, 4, 5],\n        \"s_name\": [\"Supplier#1\", \"Supplier#2\", \"Supplier#3\", \"Supplier#4\", \"Supplier#5\"],\n        \"s_address\": [\"123 Main St\", \"456 Oak Ave\", \"789 Pine Rd\", \"321 Elm St\", \"654 Maple Dr\"],\n        \"s_nationkey\": [1, 1, 2, 2, 3],\n        \"s_phone\": [\"555-0001\", \"555-0002\", \"555-0003\", \"555-0004\", \"555-0005\"],\n        \"s_acctbal\": [1000.00, 2000.00, 3000.00, 4000.00, 5000.00],\n        \"s_comment\": [\"Comment 1\", \"Comment 2\", \"Comment 3\", \"Comment 4\", \"Comment 5\"]\n    }\n    return NlkDataFrame(frame=pl.LazyFrame(data))\n</code></pre>"},{"location":"user-guide/#databases","title":"Databases","text":"<p>A Neuralake database is a Python module that contains tables. There are two main ways to create databases:</p>"},{"location":"user-guide/#module-database","title":"Module database","text":"<p>A module database wraps a Python module containing table definitions:</p> <pre><code># my_database.py\nfrom neuralake.core.tables import table\n\n@table\ndef supplier():\n    \"\"\"Supplier information.\"\"\"\n    return NlkDataFrame(...)\n\n@table\ndef partsupp():\n    \"\"\"Part supplier relationship information.\"\"\"\n    return NlkDataFrame(...)\n\n# Using the database\nfrom neuralake.core.catalog import ModuleDatabase\nimport my_database\n\ndb = ModuleDatabase(my_database)\n\n# Query data\n&gt;&gt;&gt; df = db.supplier()\n&gt;&gt;&gt; df.head()\nshape: (5, 7)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 s_suppkey\u2502 s_name    \u2502 s_address  \u2502 s_nationkey\u2502 s_phone  \u2502 s_acctbal\u2502 s_comment\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1        \u2502 Supplier#1\u2502 123 Main St\u2502 1          \u2502 555-0001 \u2502 1000.00  \u2502 Comment 1\u2502\n\u2502 2        \u2502 Supplier#2\u2502 456 Oak Ave\u2502 1          \u2502 555-0002 \u2502 2000.00  \u2502 Comment 2\u2502\n\u2502 3        \u2502 Supplier#3\u2502 789 Pine Rd\u2502 2          \u2502 555-0003 \u2502 3000.00  \u2502 Comment 3\u2502\n\u2502 4        \u2502 Supplier#4\u2502 321 Elm St \u2502 2          \u2502 555-0004 \u2502 4000.00  \u2502 Comment 4\u2502\n\u2502 5        \u2502 Supplier#5\u2502 654 Maple Dr\u2502 3         \u2502 555-0005 \u2502 5000.00  \u2502 Comment 5\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/#custom-database","title":"Custom database","text":"<p>You can also create custom databases by implementing the <code>Database</code> protocol:</p> <pre><code>from neuralake.core.catalog import Database, TableProtocol\n\nclass MyDatabase(Database):\n    def __init__(self):\n        self._tables = {\n            \"supplier\": DeltalakeTable(...),\n            \"partsupp\": ParquetTable(...),\n        }\n\n    def get_tables(self, show_deprecated: bool = False) -&gt; dict[str, TableProtocol]:\n        return self._tables\n\n    def table(self, name: str, *args, **kwargs) -&gt; NlkDataFrame:\n        return self._tables[name](*args, **kwargs)\n</code></pre>"},{"location":"user-guide/#catalogs","title":"Catalogs","text":"<p>A catalog is a Python module that is a collection of databases.</p> <pre><code>from neuralake.core.catalog import Catalog, ModuleDatabase\nimport supplier_data\nimport partsupp_data\n\n# Create a catalog\ndbs = {\n    \"supplier_data\": ModuleDatabase(supplier_data),\n    \"partsupp_data\": ModuleDatabase(partsupp_data),\n}\n\nMyCatalog = Catalog(dbs)\n\n# Query data across databases\n&gt;&gt;&gt; supplier = MyCatalog.db(\"supplier_data\").supplier()\n&gt;&gt;&gt; partsupp = MyCatalog.db(\"partsupp_data\").partsupp()\n\n# Join data across databases\n&gt;&gt;&gt; joined = supplier.join(partsupp, left_on=\"s_suppkey\", right_on=\"ps_suppkey\")\n&gt;&gt;&gt; joined.head()\nshape: (5, 12)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2510\n\u2502 s_suppkey\u2502 s_name    \u2502 s_address  \u2502 s_nationkey\u2502 s_phone  \u2502 s_acctbal\u2502 s_comment\u2502ps_partkey\u2502ps_suppkey\u2502ps_availqty \u2502ps_supplycost\u2502ps_comment \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1        \u2502 Supplier#1\u2502 123 Main St\u2502 1          \u2502 555-0001 \u2502 1000.00  \u2502 Comment 1\u2502 1        \u2502 1        \u2502 100        \u2502 100.00      \u2502 Part 1    \u2502\n\u2502 2        \u2502 Supplier#2\u2502 456 Oak Ave\u2502 1          \u2502 555-0002 \u2502 2000.00  \u2502 Comment 2\u2502 2        \u2502 2        \u2502 200        \u2502 200.00      \u2502 Part 2    \u2502\n\u2502 3        \u2502 Supplier#3\u2502 789 Pine Rd\u2502 2          \u2502 555-0003 \u2502 3000.00  \u2502 Comment 3\u2502 3        \u2502 3        \u2502 300        \u2502 300.00      \u2502 Part 3    \u2502\n\u2502 4        \u2502 Supplier#4\u2502 321 Elm St \u2502 2          \u2502 555-0004 \u2502 4000.00  \u2502 Comment 4\u2502 4        \u2502 4        \u2502 400        \u2502 400.00      \u2502 Part 4    \u2502\n\u2502 5        \u2502 Supplier#5\u2502 654 Maple D\u2502  3         \u2502 555-0005 \u2502 5000.00  \u2502 Comment 5\u2502 5        \u2502 5        \u2502 500        \u2502 500.00      \u2502 Part 5    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/#querying-data","title":"Querying data","text":"<p>Neuralake provides a consistent interface for querying data across all table types:</p> <pre><code># Filter data\n&gt;&gt;&gt; df = db.supplier(filters=[(\"s_nationkey\", \"=\", 1)])\n\n# Select columns\n&gt;&gt;&gt; df = db.supplier(columns=[\"s_suppkey\", \"s_name\"])\n\n# Complex queries\n&gt;&gt;&gt; df = db.supplier(\n...     filters=[\n...         (\"s_nationkey\", \"=\", 1),\n...         (\"s_acctbal\", \"&gt;=\", 1000.00),\n...     ],\n...     columns=[\"s_suppkey\", \"s_name\", \"s_acctbal\"],\n... )\n</code></pre>"},{"location":"user-guide/#advanced-features","title":"Advanced features","text":""},{"location":"user-guide/#caching","title":"Caching","text":"<p>DeltaLake tables support caching to improve performance:</p> <pre><code>from neuralake.core.tables import DeltaCacheOptions\n\n# Configure caching\ncache_options = DeltaCacheOptions(\n    file_cache_path=\"~/.neuralake/cache\",\n    file_cache_last_checkpoint_valid_duration=\"30m\",\n)\n\n# Use caching\n&gt;&gt;&gt; df = db.supplier(cache_options=cache_options)\n</code></pre>"},{"location":"user-guide/#custom-columns","title":"Custom columns","text":"<p>You can add custom computed columns to tables:</p> <pre><code># Add a custom column\nsupplier = DeltalakeTable(\n    name=\"supplier\",\n    uri=\"s3://my-bucket/tpc-h/supplier\",\n    schema=schema,\n    extra_cols=[\n        (pl.col(\"s_acctbal\") * 1.1, \"s_acctbal_with_tax\"),\n    ],\n)\n\n# Query with custom column\n&gt;&gt;&gt; df = supplier(columns=[\"s_suppkey\", \"s_acctbal_with_tax\"])\n</code></pre>"}]}