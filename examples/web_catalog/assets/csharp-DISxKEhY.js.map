{"version":3,"file":"csharp-DISxKEhY.js","sources":["../../../../web_catalog/node_modules/shiki/dist/langs/csharp.mjs"],"sourcesContent":["const lang = Object.freeze({ \"displayName\": \"C#\", \"name\": \"csharp\", \"patterns\": [{ \"include\": \"#preprocessor\" }, { \"include\": \"#comment\" }, { \"include\": \"#directives\" }, { \"include\": \"#declarations\" }, { \"include\": \"#script-top-level\" }], \"repository\": { \"accessor-getter\": { \"patterns\": [{ \"begin\": \"\\\\{\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.open.cs\" } }, \"contentName\": \"meta.accessor.getter.cs\", \"end\": \"\\\\}\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.close.cs\" } }, \"patterns\": [{ \"include\": \"#statement\" }] }, { \"include\": \"#accessor-getter-expression\" }, { \"include\": \"#punctuation-semicolon\" }] }, \"accessor-getter-expression\": { \"begin\": \"=>\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.arrow.cs\" } }, \"contentName\": \"meta.accessor.getter.cs\", \"end\": \"(?=;|\\\\})\", \"patterns\": [{ \"include\": \"#ref-modifier\" }, { \"include\": \"#expression\" }] }, \"accessor-setter\": { \"patterns\": [{ \"begin\": \"\\\\{\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.open.cs\" } }, \"contentName\": \"meta.accessor.setter.cs\", \"end\": \"\\\\}\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.close.cs\" } }, \"patterns\": [{ \"include\": \"#statement\" }] }, { \"begin\": \"=>\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.arrow.cs\" } }, \"contentName\": \"meta.accessor.setter.cs\", \"end\": \"(?=;|\\\\})\", \"patterns\": [{ \"include\": \"#ref-modifier\" }, { \"include\": \"#expression\" }] }, { \"include\": \"#punctuation-semicolon\" }] }, \"anonymous-method-expression\": { \"patterns\": [{ \"begin\": \"(?x)\\n((?:\\\\b(?:async|static)\\\\b\\\\s*)*)\\n(?:\\n(@?[_[:alpha:]][_[:alnum:]]*)\\\\b|\\n(\\\\()\\n(?<tuple>(?:[^()]|\\\\(\\\\g<tuple>\\\\))*)\\n(\\\\))\\n)\\\\s*\\n(=>)\", \"beginCaptures\": { \"1\": { \"patterns\": [{ \"match\": \"async|static\", \"name\": \"storage.modifier.$0.cs\" }] }, \"2\": { \"name\": \"entity.name.variable.parameter.cs\" }, \"3\": { \"name\": \"punctuation.parenthesis.open.cs\" }, \"4\": { \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#explicit-anonymous-function-parameter\" }, { \"include\": \"#implicit-anonymous-function-parameter\" }, { \"include\": \"#default-argument\" }, { \"include\": \"#punctuation-comma\" }] }, \"5\": { \"name\": \"punctuation.parenthesis.close.cs\" }, \"6\": { \"name\": \"keyword.operator.arrow.cs\" } }, \"end\": \"(?=[,;)}])\", \"patterns\": [{ \"include\": \"#intrusive\" }, { \"begin\": \"(?={)\", \"end\": \"(?=[,;)}])\", \"patterns\": [{ \"include\": \"#block\" }, { \"include\": \"#intrusive\" }] }, { \"begin\": \"\\\\b(ref)\\\\b|(?=\\\\S)\", \"beginCaptures\": { \"1\": { \"name\": \"storage.modifier.ref.cs\" } }, \"end\": \"(?=[,;)}])\", \"patterns\": [{ \"include\": \"#expression\" }] }] }, { \"begin\": \"(?x)\\n((?:\\\\b(?:async|static)\\\\b\\\\s*)*)\\n\\\\b(delegate)\\\\b\\\\s*\", \"beginCaptures\": { \"1\": { \"patterns\": [{ \"match\": \"async|static\", \"name\": \"storage.modifier.$0.cs\" }] }, \"2\": { \"name\": \"storage.type.delegate.cs\" } }, \"end\": \"(?<=})|(?=[,;)}])\", \"patterns\": [{ \"include\": \"#intrusive\" }, { \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.open.cs\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"patterns\": [{ \"include\": \"#intrusive\" }, { \"include\": \"#explicit-anonymous-function-parameter\" }, { \"include\": \"#punctuation-comma\" }] }, { \"include\": \"#block\" }] }] }, \"anonymous-object-creation-expression\": { \"begin\": \"\\\\b(new)\\\\b\\\\s*(?=\\\\{|//|/\\\\*|$)\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.operator.expression.new.cs\" } }, \"end\": \"(?<=\\\\})\", \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#initializer-expression\" }] }, \"argument\": { \"patterns\": [{ \"match\": \"\\\\b(ref|in)\\\\b\", \"name\": \"storage.modifier.$1.cs\" }, { \"begin\": \"\\\\b(out)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"storage.modifier.out.cs\" } }, \"end\": \"(?=,|\\\\)|\\\\])\", \"patterns\": [{ \"include\": \"#declaration-expression-local\" }, { \"include\": \"#expression\" }] }, { \"include\": \"#expression\" }] }, \"argument-list\": { \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.open.cs\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"patterns\": [{ \"include\": \"#named-argument\" }, { \"include\": \"#argument\" }, { \"include\": \"#punctuation-comma\" }] }, \"array-creation-expression\": { \"begin\": \"(?x)\\n\\\\b(new|stackalloc)\\\\b\\\\s*\\n(?<type_name>\\n(?:\\n(?:\\n(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\\\:\\\\:\\\\s*)?\\n(?<name_and_type_args>\\n\\\\g<identifier>\\\\s*\\n(?<type_args>\\\\s*<(?:[^<>]|\\\\g<type_args>)+>\\\\s*)?\\n)\\n(?:\\\\s*\\\\.\\\\s*\\\\g<name_and_type_args>)* |\\n(?<tuple>\\\\s*\\\\((?:[^\\\\(\\\\)]|\\\\g<tuple>)+\\\\))\\n)\\n(?:\\\\s*\\\\?\\\\s*)?\\n(?:\\\\s*\\n\\\\[\\n(?:\\\\s*,\\\\s*)*\\n\\\\]\\n\\\\s*\\n(?:\\\\?)?\\n\\\\s*\\n)*\\n)\\n)?\\\\s*\\n(?=\\\\[)\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.operator.expression.$1.cs\" }, \"2\": { \"patterns\": [{ \"include\": \"#type\" }] } }, \"end\": \"(?<=\\\\])\", \"patterns\": [{ \"include\": \"#bracketed-argument-list\" }] }, \"as-expression\": { \"captures\": { \"1\": { \"name\": \"keyword.operator.expression.as.cs\" }, \"2\": { \"patterns\": [{ \"include\": \"#type\" }] } }, \"match\": \"(?x)\\n(?<!\\\\.)\\\\b(as)\\\\b\\\\s*\\n(?<type_name>\\n(?:\\n(?:\\n(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\\\:\\\\:\\\\s*)?\\n(?<name_and_type_args>\\n\\\\g<identifier>\\\\s*\\n(?<type_args>\\\\s*<(?:[^<>]|\\\\g<type_args>)+>\\\\s*)?\\n)\\n(?:\\\\s*\\\\.\\\\s*\\\\g<name_and_type_args>)* |\\n(?<tuple>\\\\s*\\\\((?:[^\\\\(\\\\)]|\\\\g<tuple>)+\\\\))\\n)\\n(?:\\\\s*\\\\?(?!\\\\?))?\\n(?:\\\\s*\\n\\\\[\\n\\\\s*(?:,\\\\s*)*\\n\\\\]\\n(?:\\\\s*\\\\?(?!\\\\?))?\\n)*\\n)\\n)?\" }, \"assignment-expression\": { \"begin\": \"(?:\\\\*|/|%|\\\\+|-|\\\\?\\\\?|\\\\&|\\\\^|<<|>>>?|\\\\|)?=(?!=|>)\", \"beginCaptures\": { \"0\": { \"patterns\": [{ \"include\": \"#assignment-operators\" }] } }, \"end\": \"(?=[,\\\\)\\\\];}])\", \"patterns\": [{ \"include\": \"#ref-modifier\" }, { \"include\": \"#expression\" }] }, \"assignment-operators\": { \"patterns\": [{ \"match\": \"\\\\*=|/=|%=|\\\\+=|-=|\\\\?\\\\?=\", \"name\": \"keyword.operator.assignment.compound.cs\" }, { \"match\": \"\\\\&=|\\\\^=|<<=|>>>?=|\\\\|=\", \"name\": \"keyword.operator.assignment.compound.bitwise.cs\" }, { \"match\": \"\\\\=\", \"name\": \"keyword.operator.assignment.cs\" }] }, \"attribute\": { \"patterns\": [{ \"include\": \"#type-name\" }, { \"include\": \"#attribute-arguments\" }] }, \"attribute-arguments\": { \"begin\": \"(\\\\()\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.parenthesis.open.cs\" } }, \"end\": \"(\\\\))\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"patterns\": [{ \"include\": \"#attribute-named-argument\" }, { \"include\": \"#expression\" }, { \"include\": \"#punctuation-comma\" }] }, \"attribute-named-argument\": { \"begin\": \"(@?[_[:alpha:]][_[:alnum:]]*)\\\\s*(?==)\", \"beginCaptures\": { \"1\": { \"name\": \"entity.name.variable.property.cs\" } }, \"end\": \"(?=(,|\\\\)))\", \"patterns\": [{ \"include\": \"#operator-assignment\" }, { \"include\": \"#expression\" }] }, \"attribute-section\": { \"begin\": \"(\\\\[)(assembly|module|field|event|method|param|property|return|type)?(\\\\:)?\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.squarebracket.open.cs\" }, \"2\": { \"name\": \"keyword.other.attribute-specifier.cs\" }, \"3\": { \"name\": \"punctuation.separator.colon.cs\" } }, \"end\": \"(\\\\])\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.squarebracket.close.cs\" } }, \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#attribute\" }, { \"include\": \"#punctuation-comma\" }] }, \"await-expression\": { \"match\": \"(?<!\\\\.\\\\s*)\\\\b(await)\\\\b\", \"name\": \"keyword.operator.expression.await.cs\" }, \"await-statement\": { \"begin\": \"(?<!\\\\.\\\\s*)\\\\b(await)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.operator.expression.await.cs\" } }, \"end\": \"(?<=})|(?=;|})\", \"patterns\": [{ \"include\": \"#foreach-statement\" }, { \"include\": \"#using-statement\" }, { \"include\": \"#expression\" }] }, \"base-types\": { \"begin\": \":\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.separator.colon.cs\" } }, \"end\": \"(?=\\\\{|where|;)\", \"patterns\": [{ \"include\": \"#type\" }, { \"include\": \"#punctuation-comma\" }, { \"include\": \"#preprocessor\" }] }, \"block\": { \"begin\": \"\\\\{\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.open.cs\" } }, \"end\": \"\\\\}\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.close.cs\" } }, \"patterns\": [{ \"include\": \"#statement\" }] }, \"boolean-literal\": { \"patterns\": [{ \"match\": \"(?<!\\\\.)\\\\btrue\\\\b\", \"name\": \"constant.language.boolean.true.cs\" }, { \"match\": \"(?<!\\\\.)\\\\bfalse\\\\b\", \"name\": \"constant.language.boolean.false.cs\" }] }, \"bracketed-argument-list\": { \"begin\": \"\\\\[\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.squarebracket.open.cs\" } }, \"end\": \"\\\\]\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.squarebracket.close.cs\" } }, \"patterns\": [{ \"include\": \"#named-argument\" }, { \"include\": \"#argument\" }, { \"include\": \"#punctuation-comma\" }] }, \"bracketed-parameter-list\": { \"begin\": \"(?=(\\\\[))\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.squarebracket.open.cs\" } }, \"end\": \"(?=(\\\\]))\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.squarebracket.close.cs\" } }, \"patterns\": [{ \"begin\": \"(?<=\\\\[)\", \"end\": \"(?=\\\\])\", \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#attribute-section\" }, { \"include\": \"#parameter\" }, { \"include\": \"#punctuation-comma\" }, { \"include\": \"#variable-initializer\" }] }] }, \"break-or-continue-statement\": { \"match\": \"(?<!\\\\.)\\\\b(break|continue)\\\\b\", \"name\": \"keyword.control.flow.$1.cs\" }, \"case-guard\": { \"patterns\": [{ \"include\": \"#parenthesized-expression\" }, { \"include\": \"#expression\" }] }, \"cast-expression\": { \"captures\": { \"1\": { \"name\": \"punctuation.parenthesis.open.cs\" }, \"2\": { \"patterns\": [{ \"include\": \"#type\" }] }, \"7\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"match\": \"(?x)\\n(\\\\()\\\\s*\\n(?<type_name>\\n(?:\\n(?:\\n(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\\\:\\\\:\\\\s*)?\\n(?<name_and_type_args>\\n\\\\g<identifier>\\\\s*\\n(?<type_args>\\\\s*<(?:[^<>]|\\\\g<type_args>)+>\\\\s*)?\\n)\\n(?:\\\\s*\\\\.\\\\s*\\\\g<name_and_type_args>)* |\\n(?<tuple>\\\\s*\\\\((?:[^\\\\(\\\\)]|\\\\g<tuple>)+\\\\))\\n)\\n(?:\\\\s*\\\\?\\\\s*)?\\n(?:\\\\s*\\n\\\\[\\n(?:\\\\s*,\\\\s*)*\\n\\\\]\\n\\\\s*\\n(?:\\\\?)?\\n\\\\s*\\n)*\\n)\\n)\\\\s*\\n(\\\\))(?=\\\\s*-*!*@?[_[:alnum:]\\\\(])\" }, \"casted-constant-pattern\": { \"begin\": `(?x)\n(\\\\()\n([\\\\s.:@_[:alnum:]]+)\n(\\\\))\n(?=[\\\\s+\\\\-!~]*@?[_[:alnum:]('\"]+)`, \"beginCaptures\": { \"1\": { \"name\": \"punctuation.parenthesis.open.cs\" }, \"2\": { \"patterns\": [{ \"include\": \"#type-builtin\" }, { \"include\": \"#type-name\" }] }, \"3\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"end\": \"(?=[)}\\\\],;:?=&|^]|!=|\\\\b(and|or|when)\\\\b)\", \"patterns\": [{ \"include\": \"#casted-constant-pattern\" }, { \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.open.cs\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"patterns\": [{ \"include\": \"#constant-pattern\" }] }, { \"include\": \"#constant-pattern\" }, { \"captures\": { \"1\": { \"name\": \"entity.name.type.alias.cs\" }, \"2\": { \"name\": \"punctuation.separator.coloncolon.cs\" } }, \"match\": \"(@?[_[:alpha:]][_[:alnum:]]*)\\\\s*(\\\\:\\\\:)\" }, { \"captures\": { \"1\": { \"name\": \"entity.name.type.cs\" }, \"2\": { \"name\": \"punctuation.accessor.cs\" } }, \"match\": \"(@?[_[:alpha:]][_[:alnum:]]*)\\\\s*(\\\\.)\" }, { \"match\": \"\\\\@?[_[:alpha:]][_[:alnum:]]*\", \"name\": \"variable.other.constant.cs\" }] }, \"catch-clause\": { \"begin\": \"(?<!\\\\.)\\\\b(catch)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.exception.catch.cs\" } }, \"end\": \"(?<=\\\\})\", \"patterns\": [{ \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.open.cs\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"patterns\": [{ \"captures\": { \"1\": { \"patterns\": [{ \"include\": \"#type\" }] }, \"6\": { \"name\": \"entity.name.variable.local.cs\" } }, \"match\": \"(?x)\\n(?<type_name>\\n(?:\\n(?:\\n(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\\\:\\\\:\\\\s*)?\\n(?<name_and_type_args>\\n\\\\g<identifier>\\\\s*\\n(?<type_args>\\\\s*<(?:[^<>]|\\\\g<type_args>)+>\\\\s*)?\\n)\\n(?:\\\\s*\\\\.\\\\s*\\\\g<name_and_type_args>)* |\\n(?<tuple>\\\\s*\\\\((?:[^\\\\(\\\\)]|\\\\g<tuple>)+\\\\))\\n)\\n(?:\\\\s*\\\\?\\\\s*)?\\n(?:\\\\s*\\n\\\\[\\n(?:\\\\s*,\\\\s*)*\\n\\\\]\\n\\\\s*\\n(?:\\\\?)?\\n\\\\s*\\n)*\\n)\\n)\\\\s*\\n(?:(\\\\g<identifier>)\\\\b)?\" }] }, { \"include\": \"#when-clause\" }, { \"include\": \"#comment\" }, { \"include\": \"#block\" }] }, \"char-character-escape\": { \"match\": \"\\\\\\\\(x[0-9a-fA-F]{1,4}|u[0-9a-fA-F]{4}|.)\", \"name\": \"constant.character.escape.cs\" }, \"char-literal\": { \"begin\": \"'\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.char.begin.cs\" } }, \"end\": \"(\\\\')|((?:[^\\\\\\\\\\\\n])$)\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.definition.char.end.cs\" }, \"2\": { \"name\": \"invalid.illegal.newline.cs\" } }, \"name\": \"string.quoted.single.cs\", \"patterns\": [{ \"include\": \"#char-character-escape\" }] }, \"class-declaration\": { \"begin\": \"(?=(\\\\brecord\\\\b\\\\s+)?\\\\bclass\\\\b)\", \"end\": \"(?<=\\\\})|(?=;)\", \"patterns\": [{ \"begin\": \"(?x)\\n(\\\\b(record)\\\\b\\\\s+)?\\n\\\\b(class)\\\\b\\\\s+\\n(@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\", \"beginCaptures\": { \"2\": { \"name\": \"storage.type.record.cs\" }, \"3\": { \"name\": \"storage.type.class.cs\" }, \"4\": { \"name\": \"entity.name.type.class.cs\" } }, \"end\": \"(?=\\\\{)|(?=;)\", \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#type-parameter-list\" }, { \"include\": \"#parenthesized-parameter-list\" }, { \"include\": \"#base-types\" }, { \"include\": \"#generic-constraints\" }] }, { \"begin\": \"\\\\{\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.open.cs\" } }, \"end\": \"\\\\}\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.close.cs\" } }, \"patterns\": [{ \"include\": \"#class-or-struct-members\" }] }, { \"include\": \"#preprocessor\" }, { \"include\": \"#comment\" }] }, \"class-or-struct-members\": { \"patterns\": [{ \"include\": \"#preprocessor\" }, { \"include\": \"#comment\" }, { \"include\": \"#storage-modifier\" }, { \"include\": \"#type-declarations\" }, { \"include\": \"#property-declaration\" }, { \"include\": \"#field-declaration\" }, { \"include\": \"#event-declaration\" }, { \"include\": \"#indexer-declaration\" }, { \"include\": \"#variable-initializer\" }, { \"include\": \"#constructor-declaration\" }, { \"include\": \"#destructor-declaration\" }, { \"include\": \"#operator-declaration\" }, { \"include\": \"#conversion-operator-declaration\" }, { \"include\": \"#method-declaration\" }, { \"include\": \"#attribute-section\" }, { \"include\": \"#punctuation-semicolon\" }] }, \"combinator-pattern\": { \"match\": \"\\\\b(and|or|not)\\\\b\", \"name\": \"keyword.operator.expression.pattern.combinator.$1.cs\" }, \"comment\": { \"patterns\": [{ \"begin\": \"(^\\\\s+)?(///)(?!/)\", \"captures\": { \"1\": { \"name\": \"punctuation.whitespace.comment.leading.cs\" }, \"2\": { \"name\": \"punctuation.definition.comment.cs\" } }, \"name\": \"comment.block.documentation.cs\", \"patterns\": [{ \"include\": \"#xml-doc-comment\" }], \"while\": \"^(\\\\s*)(///)(?!/)\" }, { \"begin\": \"(^\\\\s+)?(/\\\\*\\\\*)(?!/)\", \"captures\": { \"1\": { \"name\": \"punctuation.whitespace.comment.leading.cs\" }, \"2\": { \"name\": \"punctuation.definition.comment.cs\" } }, \"end\": \"(^\\\\s+)?(\\\\*/)\", \"name\": \"comment.block.documentation.cs\", \"patterns\": [{ \"begin\": \"\\\\G(?=(?~\\\\*/)$)\", \"patterns\": [{ \"include\": \"#xml-doc-comment\" }], \"while\": \"^(\\\\s*+)(\\\\*(?!/))?(?=(?~\\\\*/)$)\", \"whileCaptures\": { \"1\": { \"name\": \"punctuation.whitespace.comment.leading.cs\" }, \"2\": { \"name\": \"punctuation.definition.comment.cs\" } } }, { \"include\": \"#xml-doc-comment\" }] }, { \"begin\": \"(^\\\\s+)?(//).*$\", \"captures\": { \"1\": { \"name\": \"punctuation.whitespace.comment.leading.cs\" }, \"2\": { \"name\": \"punctuation.definition.comment.cs\" } }, \"name\": \"comment.line.double-slash.cs\", \"while\": \"^(\\\\s*)(//).*$\" }, { \"begin\": \"/\\\\*\", \"captures\": { \"0\": { \"name\": \"punctuation.definition.comment.cs\" } }, \"end\": \"\\\\*/\", \"name\": \"comment.block.cs\" }] }, \"conditional-operator\": { \"patterns\": [{ \"match\": \"\\\\?(?!\\\\?|\\\\s*[.\\\\[])\", \"name\": \"keyword.operator.conditional.question-mark.cs\" }, { \"match\": \":\", \"name\": \"keyword.operator.conditional.colon.cs\" }] }, \"constant-pattern\": { \"patterns\": [{ \"include\": \"#boolean-literal\" }, { \"include\": \"#null-literal\" }, { \"include\": \"#numeric-literal\" }, { \"include\": \"#char-literal\" }, { \"include\": \"#string-literal\" }, { \"include\": \"#raw-string-literal\" }, { \"include\": \"#verbatim-string-literal\" }, { \"include\": \"#type-operator-expression\" }, { \"include\": \"#expression-operator-expression\" }, { \"include\": \"#expression-operators\" }, { \"include\": \"#casted-constant-pattern\" }] }, \"constructor-declaration\": { \"begin\": \"(?=@?[_[:alpha:]][_[:alnum:]]*\\\\s*\\\\()\", \"end\": \"(?<=\\\\})|(?=;)\", \"patterns\": [{ \"captures\": { \"1\": { \"name\": \"entity.name.function.cs\" } }, \"match\": \"(@?[_[:alpha:]][_[:alnum:]]*)\\\\b\" }, { \"begin\": \"(:)\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.separator.colon.cs\" } }, \"end\": \"(?=\\\\{|=>)\", \"patterns\": [{ \"include\": \"#constructor-initializer\" }] }, { \"include\": \"#parenthesized-parameter-list\" }, { \"include\": \"#preprocessor\" }, { \"include\": \"#comment\" }, { \"include\": \"#expression-body\" }, { \"include\": \"#block\" }] }, \"constructor-initializer\": { \"begin\": \"\\\\b(base|this)\\\\b\\\\s*(?=\\\\()\", \"beginCaptures\": { \"1\": { \"name\": \"variable.language.$1.cs\" } }, \"end\": \"(?<=\\\\))\", \"patterns\": [{ \"include\": \"#argument-list\" }] }, \"context-control-paren-statement\": { \"patterns\": [{ \"include\": \"#fixed-statement\" }, { \"include\": \"#lock-statement\" }, { \"include\": \"#using-statement\" }] }, \"context-control-statement\": { \"match\": \"\\\\b(checked|unchecked|unsafe)\\\\b(?!\\\\s*[@_[:alpha:](])\", \"name\": \"keyword.control.context.$1.cs\" }, \"conversion-operator-declaration\": { \"begin\": \"(?x)\\n(?<explicit_or_implicit_keyword>(?:\\\\b(?:explicit|implicit)))\\\\s*\\n(?<operator_keyword>(?:\\\\b(?:operator)))\\\\s*\\n(?<type_name>\\n(?:\\n(?:ref\\\\s+(?:readonly\\\\s+)?)?\\n(?:\\n(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\\\:\\\\:\\\\s*)?\\n(?<name_and_type_args>\\n\\\\g<identifier>\\\\s*\\n(?<type_args>\\\\s*<(?:[^<>]|\\\\g<type_args>)+>\\\\s*)?\\n)\\n(?:\\\\s*\\\\.\\\\s*\\\\g<name_and_type_args>)* |\\n(?<tuple>\\\\s*\\\\((?:[^\\\\(\\\\)]|\\\\g<tuple>)+\\\\))\\n)\\n(?:\\\\s*\\\\?\\\\s*)?\\n(?:\\\\s*\\n\\\\[\\n(?:\\\\s*,\\\\s*)*\\n\\\\]\\n\\\\s*\\n(?:\\\\?)?\\n\\\\s*\\n)*\\n)\\n)\\\\s*\\n(?=\\\\()\", \"beginCaptures\": { \"1\": { \"patterns\": [{ \"captures\": { \"1\": { \"name\": \"storage.modifier.explicit.cs\" } }, \"match\": \"\\\\b(explicit)\\\\b\" }, { \"captures\": { \"1\": { \"name\": \"storage.modifier.implicit.cs\" } }, \"match\": \"\\\\b(implicit)\\\\b\" }] }, \"2\": { \"name\": \"storage.type.operator.cs\" }, \"3\": { \"patterns\": [{ \"include\": \"#type\" }] } }, \"end\": \"(?<=\\\\})|(?=;)\", \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#parenthesized-parameter-list\" }, { \"include\": \"#expression-body\" }, { \"include\": \"#block\" }] }, \"declaration-expression-local\": { \"captures\": { \"1\": { \"name\": \"storage.type.var.cs\" }, \"2\": { \"patterns\": [{ \"include\": \"#type\" }] }, \"7\": { \"name\": \"entity.name.variable.local.cs\" } }, \"match\": \"(?x)\\n(?:\\n\\\\b(var)\\\\b|\\n(?<type_name>\\n(?:\\n(?:\\n(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\\\:\\\\:\\\\s*)?\\n(?<name_and_type_args>\\n\\\\g<identifier>\\\\s*\\n(?<type_args>\\\\s*<(?:[^<>]|\\\\g<type_args>)+>\\\\s*)?\\n)\\n(?:\\\\s*\\\\.\\\\s*\\\\g<name_and_type_args>)* |\\n(?<tuple>\\\\s*\\\\((?:[^\\\\(\\\\)]|\\\\g<tuple>)+\\\\))\\n)\\n(?:\\\\s*\\\\?\\\\s*)?\\n(?:\\\\s*\\n\\\\[\\n(?:\\\\s*,\\\\s*)*\\n\\\\]\\n\\\\s*\\n(?:\\\\?)?\\n\\\\s*\\n)*\\n)\\n)\\n)\\\\s+\\n(\\\\g<identifier>)\\\\b\\\\s*\\n(?=[,)\\\\]])\" }, \"declaration-expression-tuple\": { \"captures\": { \"1\": { \"name\": \"storage.type.var.cs\" }, \"2\": { \"patterns\": [{ \"include\": \"#type\" }] }, \"7\": { \"name\": \"entity.name.variable.tuple-element.cs\" } }, \"match\": \"(?x)\\n(?:\\n\\\\b(var)\\\\b|\\n(?<type_name>\\n(?:\\n(?:\\n(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\\\:\\\\:\\\\s*)?\\n(?<name_and_type_args>\\n\\\\g<identifier>\\\\s*\\n(?<type_args>\\\\s*<(?:[^<>]|\\\\g<type_args>)+>\\\\s*)?\\n)\\n(?:\\\\s*\\\\.\\\\s*\\\\g<name_and_type_args>)* |\\n(?<tuple>\\\\s*\\\\((?:[^\\\\(\\\\)]|\\\\g<tuple>)+\\\\))\\n)\\n(?:\\\\s*\\\\?\\\\s*)?\\n(?:\\\\s*\\n\\\\[\\n(?:\\\\s*,\\\\s*)*\\n\\\\]\\n\\\\s*\\n(?:\\\\?)?\\n\\\\s*\\n)*\\n)\\n)\\n)\\\\s+\\n(\\\\g<identifier>)\\\\b\\\\s*\\n(?=[,)])\" }, \"declarations\": { \"patterns\": [{ \"include\": \"#namespace-declaration\" }, { \"include\": \"#type-declarations\" }, { \"include\": \"#punctuation-semicolon\" }] }, \"default-argument\": { \"begin\": \"=\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.assignment.cs\" } }, \"end\": \"(?=,|\\\\))\", \"patterns\": [{ \"include\": \"#expression\" }] }, \"default-literal-expression\": { \"captures\": { \"1\": { \"name\": \"keyword.operator.expression.default.cs\" } }, \"match\": \"\\\\b(default)\\\\b\" }, \"delegate-declaration\": { \"begin\": \"(?x)\\n(?:\\\\b(delegate)\\\\b)\\\\s+\\n(?<type_name>\\n(?:\\n(?:ref\\\\s+(?:readonly\\\\s+)?)?\\n(?:\\n(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\\\:\\\\:\\\\s*)?\\n(?<name_and_type_args>\\n\\\\g<identifier>\\\\s*\\n(?<type_args>\\\\s*<(?:[^<>]|\\\\g<type_args>)+>\\\\s*)?\\n)\\n(?:\\\\s*\\\\.\\\\s*\\\\g<name_and_type_args>)* |\\n(?<tuple>\\\\s*\\\\((?:[^\\\\(\\\\)]|\\\\g<tuple>)+\\\\))\\n)\\n(?:\\\\s*\\\\?\\\\s*)?\\n(?:\\\\s*\\n\\\\[\\n(?:\\\\s*,\\\\s*)*\\n\\\\]\\n\\\\s*\\n(?:\\\\?)?\\n\\\\s*\\n)*\\n)\\n)\\\\s+\\n(\\\\g<identifier>)\\\\s*\\n(<([^<>]+)>)?\\\\s*\\n(?=\\\\()\", \"beginCaptures\": { \"1\": { \"name\": \"storage.type.delegate.cs\" }, \"2\": { \"patterns\": [{ \"include\": \"#type\" }] }, \"7\": { \"name\": \"entity.name.type.delegate.cs\" }, \"8\": { \"patterns\": [{ \"include\": \"#type-parameter-list\" }] } }, \"end\": \"(?=;)\", \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#parenthesized-parameter-list\" }, { \"include\": \"#generic-constraints\" }] }, \"designation-pattern\": { \"patterns\": [{ \"include\": \"#intrusive\" }, { \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.open.cs\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"patterns\": [{ \"include\": \"#punctuation-comma\" }, { \"include\": \"#designation-pattern\" }] }, { \"include\": \"#simple-designation-pattern\" }] }, \"destructor-declaration\": { \"begin\": \"(~)(@?[_[:alpha:]][_[:alnum:]]*)\\\\s*(?=\\\\()\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.tilde.cs\" }, \"2\": { \"name\": \"entity.name.function.cs\" } }, \"end\": \"(?<=\\\\})|(?=;)\", \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#parenthesized-parameter-list\" }, { \"include\": \"#expression-body\" }, { \"include\": \"#block\" }] }, \"directives\": { \"patterns\": [{ \"include\": \"#extern-alias-directive\" }, { \"include\": \"#using-directive\" }, { \"include\": \"#attribute-section\" }, { \"include\": \"#punctuation-semicolon\" }] }, \"discard-pattern\": { \"match\": \"_(?![_[:alnum:]])\", \"name\": \"variable.language.discard.cs\" }, \"do-statement\": { \"begin\": \"(?<!\\\\.)\\\\b(do)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.loop.do.cs\" } }, \"end\": \"(?=;|})\", \"patterns\": [{ \"include\": \"#statement\" }] }, \"double-raw-interpolation\": { \"begin\": \"(?<=[^\\\\{][^\\\\{]|^)((?:\\\\{)*)(\\\\{\\\\{)(?=[^\\\\{])\", \"beginCaptures\": { \"1\": { \"name\": \"string.quoted.double.cs\" }, \"2\": { \"name\": \"punctuation.definition.interpolation.begin.cs\" } }, \"end\": \"\\\\}\\\\}\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.interpolation.end.cs\" } }, \"name\": \"meta.interpolation.cs\", \"patterns\": [{ \"include\": \"#expression\" }] }, \"element-access-expression\": { \"begin\": \"(?x)\\n(?:\\n(?:(\\\\?)\\\\s*)?\\n(\\\\.)\\\\s*|\\n(->)\\\\s*\\n)?\\n(?:(@?[_[:alpha:]][_[:alnum:]]*)\\\\s*)?\\n(?:(\\\\?)\\\\s*)?\\n(?=\\\\[)\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.operator.null-conditional.cs\" }, \"2\": { \"name\": \"punctuation.accessor.cs\" }, \"3\": { \"name\": \"punctuation.accessor.pointer.cs\" }, \"4\": { \"name\": \"variable.other.object.property.cs\" }, \"5\": { \"name\": \"keyword.operator.null-conditional.cs\" } }, \"end\": \"(?<=\\\\])(?!\\\\s*\\\\[)\", \"patterns\": [{ \"include\": \"#bracketed-argument-list\" }] }, \"else-part\": { \"begin\": \"(?<!\\\\.)\\\\b(else)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.conditional.else.cs\" } }, \"end\": \"(?<=})|(?=;)\", \"patterns\": [{ \"include\": \"#statement\" }] }, \"enum-declaration\": { \"begin\": \"(?=\\\\benum\\\\b)\", \"end\": \"(?<=\\\\})\", \"patterns\": [{ \"begin\": \"(?=enum)\", \"end\": \"(?=\\\\{)\", \"patterns\": [{ \"include\": \"#comment\" }, { \"captures\": { \"1\": { \"name\": \"storage.type.enum.cs\" }, \"2\": { \"name\": \"entity.name.type.enum.cs\" } }, \"match\": \"(enum)\\\\s+(@?[_[:alpha:]][_[:alnum:]]*)\" }, { \"begin\": \":\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.separator.colon.cs\" } }, \"end\": \"(?=\\\\{)\", \"patterns\": [{ \"include\": \"#type\" }] }] }, { \"begin\": \"\\\\{\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.open.cs\" } }, \"end\": \"\\\\}\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.close.cs\" } }, \"patterns\": [{ \"include\": \"#preprocessor\" }, { \"include\": \"#comment\" }, { \"include\": \"#attribute-section\" }, { \"include\": \"#punctuation-comma\" }, { \"begin\": \"@?[_[:alpha:]][_[:alnum:]]*\", \"beginCaptures\": { \"0\": { \"name\": \"entity.name.variable.enum-member.cs\" } }, \"end\": \"(?=(,|\\\\}))\", \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#variable-initializer\" }] }] }, { \"include\": \"#preprocessor\" }, { \"include\": \"#comment\" }] }, \"event-accessors\": { \"begin\": \"\\\\{\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.open.cs\" } }, \"end\": \"\\\\}\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.close.cs\" } }, \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#attribute-section\" }, { \"begin\": \"\\\\b(add|remove)\\\\b\\\\s*(?=\\\\{|;|=>|//|/\\\\*|$)\", \"beginCaptures\": { \"1\": { \"name\": \"storage.type.accessor.$1.cs\" } }, \"end\": \"(?<=\\\\}|;)|(?=\\\\})\", \"patterns\": [{ \"include\": \"#accessor-setter\" }] }] }, \"event-declaration\": { \"begin\": \"(?x)\\n\\\\b(event)\\\\b\\\\s*\\n(?<return_type>\\n(?<type_name>\\n(?:\\n(?:\\n(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\\\:\\\\:\\\\s*)?\\n(?<name_and_type_args>\\n\\\\g<identifier>\\\\s*\\n(?<type_args>\\\\s*<(?:[^<>]|\\\\g<type_args>)+>\\\\s*)?\\n)\\n(?:\\\\s*\\\\.\\\\s*\\\\g<name_and_type_args>)* |\\n(?<tuple>\\\\s*\\\\((?:[^\\\\(\\\\)]|\\\\g<tuple>)+\\\\))\\n)\\n(?:\\\\s*\\\\?\\\\s*)?\\n(?:\\\\s*\\n\\\\[\\n(?:\\\\s*,\\\\s*)*\\n\\\\]\\n\\\\s*\\n(?:\\\\?)?\\n\\\\s*\\n)*\\n)\\n)\\\\s+\\n)\\n(?<interface_name>\\\\g<type_name>\\\\s*\\\\.\\\\s*)?\\n(\\\\g<identifier>)\\\\s*\\n(?=\\\\{|;|,|=|//|/\\\\*|$)\", \"beginCaptures\": { \"1\": { \"name\": \"storage.type.event.cs\" }, \"2\": { \"patterns\": [{ \"include\": \"#type\" }] }, \"8\": { \"patterns\": [{ \"include\": \"#type\" }, { \"include\": \"#punctuation-accessor\" }] }, \"9\": { \"name\": \"entity.name.variable.event.cs\" } }, \"end\": \"(?<=\\\\})|(?=;)\", \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#event-accessors\" }, { \"match\": \"@?[_[:alpha:]][_[:alnum:]]*\", \"name\": \"entity.name.variable.event.cs\" }, { \"include\": \"#punctuation-comma\" }, { \"begin\": \"=\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.assignment.cs\" } }, \"end\": \"(?<=,)|(?=;)\", \"patterns\": [{ \"include\": \"#expression\" }, { \"include\": \"#punctuation-comma\" }] }] }, \"explicit-anonymous-function-parameter\": { \"captures\": { \"1\": { \"name\": \"storage.modifier.$1.cs\" }, \"2\": { \"patterns\": [{ \"include\": \"#type\" }] }, \"7\": { \"name\": \"entity.name.variable.parameter.cs\" } }, \"match\": \"(?x)\\n(?:\\\\b(ref|params|out|in)\\\\b\\\\s*)?\\n(?<type_name>\\n(?:\\n(?:\\n(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\\\:\\\\:\\\\s*)?\\n(?<name_and_type_args>\\n\\\\g<identifier>\\\\s*\\n(?<type_args><(?:[^<>]|\\\\g<type_args>)*>\\\\s*)?\\n)\\n(?:\\\\s*\\\\.\\\\s*\\\\g<name_and_type_args>)* |\\n(?<tuple>\\\\s*\\\\((?:[^()]|\\\\g<tuple>)*\\\\))\\n)\\n(?:\\\\s*\\\\?\\\\s*)?\\n(?:\\\\s*\\n\\\\[\\n(?:\\\\s*,\\\\s*)*\\n\\\\]\\n\\\\s*\\n(?:\\\\?)?\\n\\\\s*\\n)*\\n)\\n)\\\\s*\\n\\\\b(\\\\g<identifier>)\\\\b\" }, \"expression\": { \"patterns\": [{ \"include\": \"#preprocessor\" }, { \"include\": \"#comment\" }, { \"include\": \"#expression-operator-expression\" }, { \"include\": \"#type-operator-expression\" }, { \"include\": \"#default-literal-expression\" }, { \"include\": \"#throw-expression\" }, { \"include\": \"#raw-interpolated-string\" }, { \"include\": \"#interpolated-string\" }, { \"include\": \"#verbatim-interpolated-string\" }, { \"include\": \"#type-builtin\" }, { \"include\": \"#language-variable\" }, { \"include\": \"#switch-statement-or-expression\" }, { \"include\": \"#with-expression\" }, { \"include\": \"#conditional-operator\" }, { \"include\": \"#assignment-expression\" }, { \"include\": \"#expression-operators\" }, { \"include\": \"#await-expression\" }, { \"include\": \"#query-expression\" }, { \"include\": \"#as-expression\" }, { \"include\": \"#is-expression\" }, { \"include\": \"#anonymous-method-expression\" }, { \"include\": \"#object-creation-expression\" }, { \"include\": \"#array-creation-expression\" }, { \"include\": \"#anonymous-object-creation-expression\" }, { \"include\": \"#invocation-expression\" }, { \"include\": \"#member-access-expression\" }, { \"include\": \"#element-access-expression\" }, { \"include\": \"#cast-expression\" }, { \"include\": \"#literal\" }, { \"include\": \"#parenthesized-expression\" }, { \"include\": \"#tuple-deconstruction-assignment\" }, { \"include\": \"#initializer-expression\" }, { \"include\": \"#identifier\" }] }, \"expression-body\": { \"begin\": \"=>\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.arrow.cs\" } }, \"end\": \"(?=[,\\\\);}])\", \"patterns\": [{ \"include\": \"#ref-modifier\" }, { \"include\": \"#expression\" }] }, \"expression-operator-expression\": { \"begin\": \"\\\\b(checked|unchecked|nameof)\\\\s*(\\\\()\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.operator.expression.$1.cs\" }, \"2\": { \"name\": \"punctuation.parenthesis.open.cs\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"patterns\": [{ \"include\": \"#expression\" }] }, \"expression-operators\": { \"patterns\": [{ \"match\": \"<<|>>>?\", \"name\": \"keyword.operator.bitwise.shift.cs\" }, { \"match\": \"==|!=\", \"name\": \"keyword.operator.comparison.cs\" }, { \"match\": \"<=|>=|<|>\", \"name\": \"keyword.operator.relational.cs\" }, { \"match\": \"\\\\!|&&|\\\\|\\\\|\", \"name\": \"keyword.operator.logical.cs\" }, { \"match\": \"\\\\&|~|\\\\^|\\\\|\", \"name\": \"keyword.operator.bitwise.cs\" }, { \"match\": \"--\", \"name\": \"keyword.operator.decrement.cs\" }, { \"match\": \"\\\\+\\\\+\", \"name\": \"keyword.operator.increment.cs\" }, { \"match\": \"\\\\+|-(?!>)|\\\\*|/|%\", \"name\": \"keyword.operator.arithmetic.cs\" }, { \"match\": \"\\\\?\\\\?\", \"name\": \"keyword.operator.null-coalescing.cs\" }, { \"match\": \"\\\\.\\\\.\", \"name\": \"keyword.operator.range.cs\" }] }, \"extern-alias-directive\": { \"begin\": \"\\\\b(extern)\\\\s+(alias)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.other.directive.extern.cs\" }, \"2\": { \"name\": \"keyword.other.directive.alias.cs\" } }, \"end\": \"(?=;)\", \"patterns\": [{ \"match\": \"\\\\@?[_[:alpha:]][_[:alnum:]]*\", \"name\": \"variable.other.alias.cs\" }] }, \"field-declaration\": { \"begin\": \"(?x)\\n(?<type_name>\\n(?:\\n(?:\\n(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\\\:\\\\:\\\\s*)?\\n(?<name_and_type_args>\\n\\\\g<identifier>\\\\s*\\n(?<type_args>\\\\s*<(?:[^<>]|\\\\g<type_args>)+>\\\\s*)?\\n)\\n(?:\\\\s*\\\\.\\\\s*\\\\g<name_and_type_args>)* |\\n(?<tuple>\\\\s*\\\\((?:[^\\\\(\\\\)]|\\\\g<tuple>)+\\\\))\\n)\\n(?:\\\\s*\\\\?\\\\s*)?\\n(?:\\\\s*\\n\\\\[\\n(?:\\\\s*,\\\\s*)*\\n\\\\]\\n\\\\s*\\n(?:\\\\?)?\\n\\\\s*\\n)*\\n)\\n)\\\\s+\\n(\\\\g<identifier>)\\\\s*\\n(?!=>|==)(?=,|;|=|$)\", \"beginCaptures\": { \"1\": { \"patterns\": [{ \"include\": \"#type\" }] }, \"6\": { \"name\": \"entity.name.variable.field.cs\" } }, \"end\": \"(?=;)\", \"patterns\": [{ \"match\": \"@?[_[:alpha:]][_[:alnum:]]*\", \"name\": \"entity.name.variable.field.cs\" }, { \"include\": \"#punctuation-comma\" }, { \"include\": \"#comment\" }, { \"include\": \"#variable-initializer\" }, { \"include\": \"#class-or-struct-members\" }] }, \"finally-clause\": { \"begin\": \"(?<!\\\\.)\\\\b(finally)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.exception.finally.cs\" } }, \"end\": \"(?<=\\\\})\", \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#block\" }] }, \"fixed-statement\": { \"begin\": \"\\\\b(fixed)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.context.fixed.cs\" } }, \"end\": \"(?<=\\\\))|(?=;|})\", \"patterns\": [{ \"include\": \"#intrusive\" }, { \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.open.cs\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"patterns\": [{ \"include\": \"#intrusive\" }, { \"include\": \"#local-variable-declaration\" }] }] }, \"for-statement\": { \"begin\": \"\\\\b(for)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.loop.for.cs\" } }, \"end\": \"(?<=\\\\))|(?=;|})\", \"patterns\": [{ \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.open.cs\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"patterns\": [{ \"begin\": \"(?=[^;\\\\)])\", \"end\": \"(?=;|\\\\))\", \"patterns\": [{ \"include\": \"#intrusive\" }, { \"include\": \"#local-variable-declaration\" }] }, { \"begin\": \"(?=;)\", \"end\": \"(?=\\\\))\", \"patterns\": [{ \"include\": \"#intrusive\" }, { \"include\": \"#expression\" }, { \"include\": \"#punctuation-comma\" }, { \"include\": \"#punctuation-semicolon\" }] }] }] }, \"foreach-statement\": { \"begin\": \"\\\\b(foreach)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.loop.foreach.cs\" } }, \"end\": \"(?<=\\\\))|(?=;|})\", \"patterns\": [{ \"include\": \"#intrusive\" }, { \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.open.cs\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"patterns\": [{ \"include\": \"#intrusive\" }, { \"captures\": { \"1\": { \"name\": \"storage.modifier.ref.cs\" }, \"2\": { \"name\": \"storage.type.var.cs\" }, \"3\": { \"patterns\": [{ \"include\": \"#type\" }] }, \"8\": { \"name\": \"entity.name.variable.local.cs\" }, \"9\": { \"name\": \"keyword.control.loop.in.cs\" } }, \"match\": \"(?x)\\n(?:\\n(?:(\\\\bref)\\\\s+)?(\\\\bvar\\\\b)|\\n(?<type_name>\\n(?:\\n(?:ref\\\\s+)?\\n(?:\\n(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\\\:\\\\:\\\\s*)?\\n(?<name_and_type_args>\\n\\\\g<identifier>\\\\s*\\n(?<type_args>\\\\s*<(?:[^<>]|\\\\g<type_args>)+>\\\\s*)?\\n)\\n(?:\\\\s*\\\\.\\\\s*\\\\g<name_and_type_args>)* |\\n(?<tuple>\\\\s*\\\\((?:[^\\\\(\\\\)]|\\\\g<tuple>)+\\\\))\\n)\\n(?:\\\\s*\\\\?\\\\s*)?\\n(?:\\\\s*\\n\\\\[\\n(?:\\\\s*,\\\\s*)*\\n\\\\]\\n\\\\s*\\n(?:\\\\?)?\\n\\\\s*\\n)*\\n)\\n)\\n)\\\\s+\\n(\\\\g<identifier>)\\\\s+\\n\\\\b(in)\\\\b\" }, { \"captures\": { \"1\": { \"name\": \"storage.type.var.cs\" }, \"2\": { \"patterns\": [{ \"include\": \"#tuple-declaration-deconstruction-element-list\" }] }, \"3\": { \"name\": \"keyword.control.loop.in.cs\" } }, \"match\": \"(?x)\\n(?:\\\\b(var)\\\\b\\\\s*)?\\n(?<tuple>\\\\((?:[^\\\\(\\\\)]|\\\\g<tuple>)+\\\\))\\\\s+\\n\\\\b(in)\\\\b\" }, { \"include\": \"#expression\" }] }] }, \"generic-constraints\": { \"begin\": \"(where)\\\\s+(@?[_[:alpha:]][_[:alnum:]]*)\\\\s*(:)\", \"beginCaptures\": { \"1\": { \"name\": \"storage.modifier.where.cs\" }, \"2\": { \"name\": \"entity.name.type.type-parameter.cs\" }, \"3\": { \"name\": \"punctuation.separator.colon.cs\" } }, \"end\": \"(?=\\\\{|where|;|=>)\", \"patterns\": [{ \"match\": \"\\\\bclass\\\\b\", \"name\": \"storage.type.class.cs\" }, { \"match\": \"\\\\bstruct\\\\b\", \"name\": \"storage.type.struct.cs\" }, { \"match\": \"\\\\bdefault\\\\b\", \"name\": \"keyword.other.constraint.default.cs\" }, { \"match\": \"\\\\bnotnull\\\\b\", \"name\": \"keyword.other.constraint.notnull.cs\" }, { \"match\": \"\\\\bunmanaged\\\\b\", \"name\": \"keyword.other.constraint.unmanaged.cs\" }, { \"captures\": { \"1\": { \"name\": \"keyword.operator.expression.new.cs\" }, \"2\": { \"name\": \"punctuation.parenthesis.open.cs\" }, \"3\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"match\": \"(new)\\\\s*(\\\\()\\\\s*(\\\\))\" }, { \"include\": \"#type\" }, { \"include\": \"#punctuation-comma\" }, { \"include\": \"#generic-constraints\" }] }, \"goto-statement\": { \"begin\": \"(?<!\\\\.)\\\\b(goto)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.flow.goto.cs\" } }, \"end\": \"(?=[;}])\", \"patterns\": [{ \"begin\": \"\\\\b(case)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.conditional.case.cs\" } }, \"end\": \"(?=[;}])\", \"patterns\": [{ \"include\": \"#expression\" }] }, { \"captures\": { \"1\": { \"name\": \"keyword.control.conditional.default.cs\" } }, \"match\": \"\\\\b(default)\\\\b\" }, { \"match\": \"@?[_[:alpha:]][_[:alnum:]]*\", \"name\": \"entity.name.label.cs\" }] }, \"group-by\": { \"captures\": { \"1\": { \"name\": \"keyword.operator.expression.query.by.cs\" } }, \"match\": \"\\\\b(by)\\\\b\\\\s*\" }, \"group-clause\": { \"begin\": \"\\\\b(group)\\\\b\\\\s*\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.operator.expression.query.group.cs\" } }, \"end\": \"(?=;|\\\\))\", \"patterns\": [{ \"include\": \"#group-by\" }, { \"include\": \"#group-into\" }, { \"include\": \"#query-body\" }, { \"include\": \"#expression\" }] }, \"group-into\": { \"captures\": { \"1\": { \"name\": \"keyword.operator.expression.query.into.cs\" }, \"2\": { \"name\": \"entity.name.variable.range-variable.cs\" } }, \"match\": \"(?x)\\n\\\\b(into)\\\\b\\\\s*\\n(@?[_[:alpha:]][_[:alnum:]]*)\\\\b\\\\s*\" }, \"identifier\": { \"match\": \"@?[_[:alpha:]][_[:alnum:]]*\", \"name\": \"variable.other.readwrite.cs\" }, \"if-statement\": { \"begin\": \"(?<!\\\\.)\\\\b(if)\\\\b\\\\s*(?=\\\\()\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.conditional.if.cs\" } }, \"end\": \"(?<=})|(?=;)\", \"patterns\": [{ \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.open.cs\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"patterns\": [{ \"include\": \"#expression\" }] }, { \"include\": \"#statement\" }] }, \"implicit-anonymous-function-parameter\": { \"match\": \"\\\\@?[_[:alpha:]][_[:alnum:]]*\\\\b\", \"name\": \"entity.name.variable.parameter.cs\" }, \"indexer-declaration\": { \"begin\": \"(?x)\\n(?<return_type>\\n(?<type_name>\\n(?:\\n(?:ref\\\\s+(?:readonly\\\\s+)?)?\\n(?:\\n(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\\\:\\\\:\\\\s*)?\\n(?<name_and_type_args>\\n\\\\g<identifier>\\\\s*\\n(?<type_args>\\\\s*<(?:[^<>]|\\\\g<type_args>)+>\\\\s*)?\\n)\\n(?:\\\\s*\\\\.\\\\s*\\\\g<name_and_type_args>)* |\\n(?<tuple>\\\\s*\\\\((?:[^\\\\(\\\\)]|\\\\g<tuple>)+\\\\))\\n)\\n(?:\\\\s*\\\\?\\\\s*)?\\n(?:\\\\s*\\n\\\\[\\n(?:\\\\s*,\\\\s*)*\\n\\\\]\\n\\\\s*\\n(?:\\\\?)?\\n\\\\s*\\n)*\\n)\\n)\\\\s+\\n)\\n(?<interface_name>\\\\g<type_name>\\\\s*\\\\.\\\\s*)?\\n(?<indexer_name>this)\\\\s*\\n(?=\\\\[)\", \"beginCaptures\": { \"1\": { \"patterns\": [{ \"include\": \"#type\" }] }, \"7\": { \"patterns\": [{ \"include\": \"#type\" }, { \"include\": \"#punctuation-accessor\" }] }, \"8\": { \"name\": \"variable.language.this.cs\" } }, \"end\": \"(?<=\\\\})|(?=;)\", \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#bracketed-parameter-list\" }, { \"include\": \"#property-accessors\" }, { \"include\": \"#accessor-getter-expression\" }, { \"include\": \"#variable-initializer\" }] }, \"initializer-expression\": { \"begin\": \"\\\\{\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.open.cs\" } }, \"end\": \"\\\\}\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.close.cs\" } }, \"patterns\": [{ \"include\": \"#expression\" }, { \"include\": \"#punctuation-comma\" }] }, \"interface-declaration\": { \"begin\": \"(?=\\\\binterface\\\\b)\", \"end\": \"(?<=\\\\})\", \"patterns\": [{ \"begin\": \"(?x)\\n(interface)\\\\b\\\\s+\\n(@?[_[:alpha:]][_[:alnum:]]*)\", \"beginCaptures\": { \"1\": { \"name\": \"storage.type.interface.cs\" }, \"2\": { \"name\": \"entity.name.type.interface.cs\" } }, \"end\": \"(?=\\\\{)\", \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#type-parameter-list\" }, { \"include\": \"#base-types\" }, { \"include\": \"#generic-constraints\" }] }, { \"begin\": \"\\\\{\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.open.cs\" } }, \"end\": \"\\\\}\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.close.cs\" } }, \"patterns\": [{ \"include\": \"#interface-members\" }] }, { \"include\": \"#preprocessor\" }, { \"include\": \"#comment\" }] }, \"interface-members\": { \"patterns\": [{ \"include\": \"#preprocessor\" }, { \"include\": \"#comment\" }, { \"include\": \"#storage-modifier\" }, { \"include\": \"#property-declaration\" }, { \"include\": \"#event-declaration\" }, { \"include\": \"#indexer-declaration\" }, { \"include\": \"#method-declaration\" }, { \"include\": \"#operator-declaration\" }, { \"include\": \"#attribute-section\" }, { \"include\": \"#punctuation-semicolon\" }] }, \"interpolated-string\": { \"begin\": '\\\\$\"', \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.begin.cs\" } }, \"end\": '(\")|((?:[^\\\\\\\\\\\\n])$)', \"endCaptures\": { \"1\": { \"name\": \"punctuation.definition.string.end.cs\" }, \"2\": { \"name\": \"invalid.illegal.newline.cs\" } }, \"name\": \"string.quoted.double.cs\", \"patterns\": [{ \"include\": \"#string-character-escape\" }, { \"include\": \"#interpolation\" }] }, \"interpolation\": { \"begin\": \"(?<=[^\\\\{]|^)((?:\\\\{\\\\{)*)(\\\\{)(?=[^\\\\{])\", \"beginCaptures\": { \"1\": { \"name\": \"string.quoted.double.cs\" }, \"2\": { \"name\": \"punctuation.definition.interpolation.begin.cs\" } }, \"end\": \"\\\\}\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.interpolation.end.cs\" } }, \"name\": \"meta.interpolation.cs\", \"patterns\": [{ \"include\": \"#expression\" }] }, \"intrusive\": { \"patterns\": [{ \"include\": \"#preprocessor\" }, { \"include\": \"#comment\" }] }, \"invocation-expression\": { \"begin\": \"(?x)\\n(?:\\n(?:(\\\\?)\\\\s*)?\\n(\\\\.)\\\\s*|\\n(->)\\\\s*\\n)?\\n(@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\n(\\n<\\n(?<type_args>\\n[^<>()]++|\\n<\\\\g<type_args>*+>|\\n\\\\(\\\\g<type_args>*+\\\\)\\n)*+\\n>\\\\s*\\n)?\\n(?=\\\\()\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.operator.null-conditional.cs\" }, \"2\": { \"name\": \"punctuation.accessor.cs\" }, \"3\": { \"name\": \"punctuation.accessor.pointer.cs\" }, \"4\": { \"name\": \"entity.name.function.cs\" }, \"5\": { \"patterns\": [{ \"include\": \"#type-arguments\" }] } }, \"end\": \"(?<=\\\\))\", \"patterns\": [{ \"include\": \"#argument-list\" }] }, \"is-expression\": { \"begin\": \"(?<!\\\\.)\\\\b(is)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.operator.expression.pattern.is.cs\" } }, \"end\": \"(?=[)}\\\\],;:?=&|^]|!=)\", \"patterns\": [{ \"include\": \"#pattern\" }] }, \"join-clause\": { \"begin\": \"(?x)\\n\\\\b(join)\\\\b\\\\s*\\n(?<type_name>\\n(?:\\n(?:\\n(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\\\:\\\\:\\\\s*)?\\n(?<name_and_type_args>\\n\\\\g<identifier>\\\\s*\\n(?<type_args>\\\\s*<(?:[^<>]|\\\\g<type_args>)+>\\\\s*)?\\n)\\n(?:\\\\s*\\\\.\\\\s*\\\\g<name_and_type_args>)* |\\n(?<tuple>\\\\s*\\\\((?:[^\\\\(\\\\)]|\\\\g<tuple>)+\\\\))\\n)\\n(?:\\\\s*\\\\?\\\\s*)?\\n(?:\\\\s*\\n\\\\[\\n(?:\\\\s*,\\\\s*)*\\n\\\\]\\n\\\\s*\\n(?:\\\\?)?\\n\\\\s*\\n)*\\n)\\n)?\\n\\\\s+(\\\\g<identifier>)\\\\b\\\\s*\\n\\\\b(in)\\\\b\\\\s*\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.operator.expression.query.join.cs\" }, \"2\": { \"patterns\": [{ \"include\": \"#type\" }] }, \"7\": { \"name\": \"entity.name.variable.range-variable.cs\" }, \"8\": { \"name\": \"keyword.operator.expression.query.in.cs\" } }, \"end\": \"(?=;|\\\\))\", \"patterns\": [{ \"include\": \"#join-on\" }, { \"include\": \"#join-equals\" }, { \"include\": \"#join-into\" }, { \"include\": \"#query-body\" }, { \"include\": \"#expression\" }] }, \"join-equals\": { \"captures\": { \"1\": { \"name\": \"keyword.operator.expression.query.equals.cs\" } }, \"match\": \"\\\\b(equals)\\\\b\\\\s*\" }, \"join-into\": { \"captures\": { \"1\": { \"name\": \"keyword.operator.expression.query.into.cs\" }, \"2\": { \"name\": \"entity.name.variable.range-variable.cs\" } }, \"match\": \"(?x)\\n\\\\b(into)\\\\b\\\\s*\\n(@?[_[:alpha:]][_[:alnum:]]*)\\\\b\\\\s*\" }, \"join-on\": { \"captures\": { \"1\": { \"name\": \"keyword.operator.expression.query.on.cs\" } }, \"match\": \"\\\\b(on)\\\\b\\\\s*\" }, \"labeled-statement\": { \"captures\": { \"1\": { \"name\": \"entity.name.label.cs\" }, \"2\": { \"name\": \"punctuation.separator.colon.cs\" } }, \"match\": \"(@?[_[:alpha:]][_[:alnum:]]*)\\\\s*(:)\" }, \"language-variable\": { \"patterns\": [{ \"match\": \"\\\\b(base|this)\\\\b\", \"name\": \"variable.language.$1.cs\" }, { \"match\": \"\\\\b(value)\\\\b\", \"name\": \"variable.other.$1.cs\" }] }, \"let-clause\": { \"begin\": \"(?x)\\n\\\\b(let)\\\\b\\\\s*\\n(@?[_[:alpha:]][_[:alnum:]]*)\\\\b\\\\s*\\n(=)\\\\s*\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.operator.expression.query.let.cs\" }, \"2\": { \"name\": \"entity.name.variable.range-variable.cs\" }, \"3\": { \"name\": \"keyword.operator.assignment.cs\" } }, \"end\": \"(?=;|\\\\))\", \"patterns\": [{ \"include\": \"#query-body\" }, { \"include\": \"#expression\" }] }, \"list-pattern\": { \"begin\": \"(?=\\\\[)\", \"end\": \"(?=[)}\\\\],;:?=&|^]|!=|\\\\b(and|or|when)\\\\b)\", \"patterns\": [{ \"begin\": \"\\\\[\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.squarebracket.open.cs\" } }, \"end\": \"\\\\]\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.squarebracket.close.cs\" } }, \"patterns\": [{ \"include\": \"#pattern\" }, { \"include\": \"#punctuation-comma\" }] }, { \"begin\": \"(?<=\\\\])\", \"end\": \"(?=[)}\\\\],;:?=&|^]|!=|\\\\b(and|or|when)\\\\b)\", \"patterns\": [{ \"include\": \"#intrusive\" }, { \"include\": \"#simple-designation-pattern\" }] }] }, \"literal\": { \"patterns\": [{ \"include\": \"#boolean-literal\" }, { \"include\": \"#null-literal\" }, { \"include\": \"#numeric-literal\" }, { \"include\": \"#char-literal\" }, { \"include\": \"#raw-string-literal\" }, { \"include\": \"#string-literal\" }, { \"include\": \"#verbatim-string-literal\" }, { \"include\": \"#tuple-literal\" }] }, \"local-constant-declaration\": { \"begin\": \"(?x)\\n(?<const_keyword>\\\\b(?:const)\\\\b)\\\\s*\\n(?<type_name>\\n(?:\\n(?:\\n(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\\\:\\\\:\\\\s*)?\\n(?<name_and_type_args>\\n\\\\g<identifier>\\\\s*\\n(?<type_args>\\\\s*<(?:[^<>]|\\\\g<type_args>)+>\\\\s*)?\\n)\\n(?:\\\\s*\\\\.\\\\s*\\\\g<name_and_type_args>)* |\\n(?<tuple>\\\\s*\\\\((?:[^\\\\(\\\\)]|\\\\g<tuple>)+\\\\))\\n)\\n(?:\\\\s*\\\\?\\\\s*)?\\n(?:\\\\s*\\n\\\\[\\n(?:\\\\s*,\\\\s*)*\\n\\\\]\\n\\\\s*\\n(?:\\\\?)?\\n\\\\s*\\n)*\\n)\\n)\\\\s+\\n(\\\\g<identifier>)\\\\s*\\n(?=,|;|=)\", \"beginCaptures\": { \"1\": { \"name\": \"storage.modifier.const.cs\" }, \"2\": { \"patterns\": [{ \"include\": \"#type\" }] }, \"7\": { \"name\": \"entity.name.variable.local.cs\" } }, \"end\": \"(?=;)\", \"patterns\": [{ \"match\": \"@?[_[:alpha:]][_[:alnum:]]*\", \"name\": \"entity.name.variable.local.cs\" }, { \"include\": \"#punctuation-comma\" }, { \"include\": \"#comment\" }, { \"include\": \"#variable-initializer\" }] }, \"local-declaration\": { \"patterns\": [{ \"include\": \"#local-constant-declaration\" }, { \"include\": \"#local-variable-declaration\" }, { \"include\": \"#local-function-declaration\" }, { \"include\": \"#local-tuple-var-deconstruction\" }] }, \"local-function-declaration\": { \"begin\": \"(?x)\\n\\\\b((?:(?:async|unsafe|static|extern)\\\\s+)*)\\n(?<type_name>\\n(?:ref\\\\s+(?:readonly\\\\s+)?)?\\n(?:\\n(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\\\:\\\\:\\\\s*)?\\n(?<name_and_type_args>\\n\\\\g<identifier>\\\\s*\\n(?<type_args>\\\\s*<(?:[^<>]|\\\\g<type_args>)+>\\\\s*)?\\n)\\n(?:\\\\s*\\\\.\\\\s*\\\\g<name_and_type_args>)* |\\n(?<tuple>\\\\s*\\\\((?:[^\\\\(\\\\)]|\\\\g<tuple>)+\\\\))\\n)\\n(?:\\\\s*\\\\?)?\\n(?:\\\\s*\\n\\\\[\\n\\\\s*(?:,\\\\s*)*\\n\\\\]\\n(?:\\\\s*\\\\?)?\\n)*\\n)\\\\s+\\n(\\\\g<identifier>)\\\\s*\\n(<[^<>]+>)?\\\\s*\\n(?=\\\\()\", \"beginCaptures\": { \"1\": { \"patterns\": [{ \"include\": \"#storage-modifier\" }] }, \"2\": { \"patterns\": [{ \"include\": \"#type\" }] }, \"7\": { \"name\": \"entity.name.function.cs\" }, \"8\": { \"patterns\": [{ \"include\": \"#type-parameter-list\" }] } }, \"end\": \"(?<=\\\\})|(?=;)\", \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#parenthesized-parameter-list\" }, { \"include\": \"#generic-constraints\" }, { \"include\": \"#expression-body\" }, { \"include\": \"#block\" }] }, \"local-tuple-var-deconstruction\": { \"begin\": \"(?x)\\n(?:\\\\b(var)\\\\b\\\\s*)\\n(?<tuple>\\\\((?:[^\\\\(\\\\)]|\\\\g<tuple>)+\\\\))\\\\s*\\n(?=;|=|\\\\))\", \"beginCaptures\": { \"1\": { \"name\": \"storage.type.var.cs\" }, \"2\": { \"patterns\": [{ \"include\": \"#tuple-declaration-deconstruction-element-list\" }] } }, \"end\": \"(?=;|\\\\))\", \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#variable-initializer\" }] }, \"local-variable-declaration\": { \"begin\": \"(?x)\\n(?:\\n(?:(\\\\bref)\\\\s+(?:(\\\\breadonly)\\\\s+)?)?(\\\\bvar\\\\b)|\\n(?<type_name>\\n(?:\\n(?:ref\\\\s+(?:readonly\\\\s+)?)?\\n(?:\\n(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\\\:\\\\:\\\\s*)?\\n(?<name_and_type_args>\\n\\\\g<identifier>\\\\s*\\n(?<type_args>\\\\s*<(?:[^<>]|\\\\g<type_args>)+>\\\\s*)?\\n)\\n(?:\\\\s*\\\\.\\\\s*\\\\g<name_and_type_args>)* |\\n(?<tuple>\\\\s*\\\\((?:[^\\\\(\\\\)]|\\\\g<tuple>)+\\\\))\\n)\\n(?:\\\\s*[?*]\\\\s*)?\\n(?:\\\\s*\\n\\\\[\\n(?:\\\\s*,\\\\s*)*\\n\\\\]\\n\\\\s*\\n(?:\\\\?)?\\n\\\\s*\\n)*\\n)\\n)\\n)\\\\s+\\n(\\\\g<identifier>)\\\\s*\\n(?!=>)\\n(?=,|;|=|\\\\))\", \"beginCaptures\": { \"1\": { \"name\": \"storage.modifier.ref.cs\" }, \"2\": { \"name\": \"storage.modifier.readonly.cs\" }, \"3\": { \"name\": \"storage.type.var.cs\" }, \"4\": { \"patterns\": [{ \"include\": \"#type\" }] }, \"9\": { \"name\": \"entity.name.variable.local.cs\" } }, \"end\": \"(?=[;)}])\", \"patterns\": [{ \"match\": \"@?[_[:alpha:]][_[:alnum:]]*\", \"name\": \"entity.name.variable.local.cs\" }, { \"include\": \"#punctuation-comma\" }, { \"include\": \"#comment\" }, { \"include\": \"#variable-initializer\" }] }, \"lock-statement\": { \"begin\": \"\\\\b(lock)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.context.lock.cs\" } }, \"end\": \"(?<=\\\\))|(?=;|})\", \"patterns\": [{ \"include\": \"#intrusive\" }, { \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.open.cs\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"patterns\": [{ \"include\": \"#intrusive\" }, { \"include\": \"#expression\" }] }] }, \"member-access-expression\": { \"patterns\": [{ \"captures\": { \"1\": { \"name\": \"keyword.operator.null-conditional.cs\" }, \"2\": { \"name\": \"punctuation.accessor.cs\" }, \"3\": { \"name\": \"punctuation.accessor.pointer.cs\" }, \"4\": { \"name\": \"variable.other.object.property.cs\" } }, \"match\": \"(?x)\\n(?:\\n(?:(\\\\?)\\\\s*)?\\n(\\\\.)\\\\s*|\\n(->)\\\\s*\\n)\\n(@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\n(?![_[:alnum:]]|\\\\(|(\\\\?)?\\\\[|<)\" }, { \"captures\": { \"1\": { \"name\": \"punctuation.accessor.cs\" }, \"2\": { \"name\": \"variable.other.object.cs\" }, \"3\": { \"patterns\": [{ \"include\": \"#type-arguments\" }] } }, \"match\": \"(?x)\\n(\\\\.)?\\\\s*\\n(@?[_[:alpha:]][_[:alnum:]]*)\\n(?<type_params>\\\\s*<([^<>]|\\\\g<type_params>)+>\\\\s*)\\n(?=\\n(\\\\s*\\\\?)?\\n\\\\s*\\\\.\\\\s*@?[_[:alpha:]][_[:alnum:]]*\\n)\" }, { \"captures\": { \"1\": { \"name\": \"variable.other.object.cs\" } }, \"match\": \"(?x)\\n(@?[_[:alpha:]][_[:alnum:]]*)\\n(?=\\n\\\\s*(?:(?:\\\\?\\\\s*)?\\\\.|->)\\n\\\\s*@?[_[:alpha:]][_[:alnum:]]*\\n)\" }] }, \"method-declaration\": { \"begin\": \"(?x)\\n(?<return_type>\\n(?<type_name>\\n(?:\\n(?:ref\\\\s+(?:readonly\\\\s+)?)?\\n(?:\\n(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\\\:\\\\:\\\\s*)?\\n(?<name_and_type_args>\\n\\\\g<identifier>\\\\s*\\n(?<type_args>\\\\s*<(?:[^<>]|\\\\g<type_args>)+>\\\\s*)?\\n)\\n(?:\\\\s*\\\\.\\\\s*\\\\g<name_and_type_args>)* |\\n(?<tuple>\\\\s*\\\\((?:[^\\\\(\\\\)]|\\\\g<tuple>)+\\\\))\\n)\\n(?:\\\\s*\\\\?\\\\s*)?\\n(?:\\\\s*\\n\\\\[\\n(?:\\\\s*,\\\\s*)*\\n\\\\]\\n\\\\s*\\n(?:\\\\?)?\\n\\\\s*\\n)*\\n)\\n)\\\\s+\\n)\\n(?<interface_name>\\\\g<type_name>\\\\s*\\\\.\\\\s*)?\\n(\\\\g<identifier>)\\\\s*\\n(<([^<>]+)>)?\\\\s*\\n(?=\\\\()\", \"beginCaptures\": { \"1\": { \"patterns\": [{ \"include\": \"#type\" }] }, \"7\": { \"patterns\": [{ \"include\": \"#type\" }, { \"include\": \"#punctuation-accessor\" }] }, \"8\": { \"name\": \"entity.name.function.cs\" }, \"9\": { \"patterns\": [{ \"include\": \"#type-parameter-list\" }] } }, \"end\": \"(?<=\\\\})|(?=;)\", \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#parenthesized-parameter-list\" }, { \"include\": \"#generic-constraints\" }, { \"include\": \"#expression-body\" }, { \"include\": \"#block\" }] }, \"named-argument\": { \"begin\": \"(@?[_[:alpha:]][_[:alnum:]]*)\\\\s*(:)\", \"beginCaptures\": { \"1\": { \"name\": \"entity.name.variable.parameter.cs\" }, \"2\": { \"name\": \"punctuation.separator.colon.cs\" } }, \"end\": \"(?=(,|\\\\)|\\\\]))\", \"patterns\": [{ \"include\": \"#argument\" }] }, \"namespace-declaration\": { \"begin\": \"\\\\b(namespace)\\\\s+\", \"beginCaptures\": { \"1\": { \"name\": \"storage.type.namespace.cs\" } }, \"end\": \"(?<=\\\\})|(?=;)\", \"patterns\": [{ \"include\": \"#comment\" }, { \"match\": \"@?[_[:alpha:]][_[:alnum:]]*\", \"name\": \"entity.name.type.namespace.cs\" }, { \"include\": \"#punctuation-accessor\" }, { \"begin\": \"\\\\{\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.open.cs\" } }, \"end\": \"\\\\}\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.close.cs\" } }, \"patterns\": [{ \"include\": \"#declarations\" }, { \"include\": \"#using-directive\" }, { \"include\": \"#punctuation-semicolon\" }] }] }, \"null-literal\": { \"match\": \"(?<!\\\\.)\\\\bnull\\\\b\", \"name\": \"constant.language.null.cs\" }, \"numeric-literal\": { \"captures\": { \"0\": { \"patterns\": [{ \"begin\": \"(?=.)\", \"end\": \"$\", \"patterns\": [{ \"captures\": { \"2\": { \"name\": \"constant.numeric.decimal.cs\", \"patterns\": [{ \"match\": \"(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])\", \"name\": \"constant.numeric.other.separator.thousands.cs\" }] }, \"3\": { \"name\": \"constant.numeric.other.separator.thousands.cs\" }, \"4\": { \"name\": \"constant.numeric.other.separator.decimals.cs\" }, \"5\": { \"name\": \"constant.numeric.decimal.cs\", \"patterns\": [{ \"match\": \"(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])\", \"name\": \"constant.numeric.other.separator.thousands.cs\" }] }, \"6\": { \"name\": \"constant.numeric.other.separator.thousands.cs\" }, \"8\": { \"name\": \"constant.numeric.other.exponent.cs\" }, \"9\": { \"name\": \"keyword.operator.arithmetic.cs\" }, \"10\": { \"name\": \"keyword.operator.arithmetic.cs\" }, \"11\": { \"name\": \"constant.numeric.decimal.cs\", \"patterns\": [{ \"match\": \"(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])\", \"name\": \"constant.numeric.other.separator.thousands.cs\" }] }, \"12\": { \"name\": \"constant.numeric.other.suffix.cs\" } }, \"match\": \"(\\\\G(?=[0-9.])(?!0[xXbB]))([0-9](?:[0-9]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)?((?:(?<=[0-9])|\\\\.(?=[0-9])))([0-9](?:[0-9]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)?((?<!_)([eE])(\\\\+?)(\\\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)))?([fFdDmM](?!\\\\w))?$\" }, { \"captures\": { \"1\": { \"name\": \"constant.numeric.other.preffix.binary.cs\" }, \"2\": { \"name\": \"constant.numeric.binary.cs\", \"patterns\": [{ \"match\": \"(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])\", \"name\": \"constant.numeric.other.separator.thousands.cs\" }] }, \"3\": { \"name\": \"constant.numeric.other.separator.thousands.cs\" }, \"4\": { \"name\": \"constant.numeric.other.suffix.cs\" } }, \"match\": \"(\\\\G0[bB])([01_](?:[01_]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)((?:(?:(?:(?:(?:[uU]|[uU]l)|[uU]L)|l[uU]?)|L[uU]?)|[fFdDmM])(?!\\\\w))?$\" }, { \"captures\": { \"1\": { \"name\": \"constant.numeric.other.preffix.hex.cs\" }, \"2\": { \"name\": \"constant.numeric.hex.cs\", \"patterns\": [{ \"match\": \"(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])\", \"name\": \"constant.numeric.other.separator.thousands.cs\" }] }, \"3\": { \"name\": \"constant.numeric.other.separator.thousands.cs\" }, \"4\": { \"name\": \"constant.numeric.other.suffix.cs\" } }, \"match\": \"(\\\\G0[xX])([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)((?:(?:(?:(?:(?:[uU]|[uU]l)|[uU]L)|l[uU]?)|L[uU]?)|[fFdDmM])(?!\\\\w))?$\" }, { \"captures\": { \"2\": { \"name\": \"constant.numeric.decimal.cs\", \"patterns\": [{ \"match\": \"(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])\", \"name\": \"constant.numeric.other.separator.thousands.cs\" }] }, \"3\": { \"name\": \"constant.numeric.other.separator.thousands.cs\" }, \"5\": { \"name\": \"constant.numeric.other.exponent.cs\" }, \"6\": { \"name\": \"keyword.operator.arithmetic.cs\" }, \"7\": { \"name\": \"keyword.operator.arithmetic.cs\" }, \"8\": { \"name\": \"constant.numeric.decimal.cs\", \"patterns\": [{ \"match\": \"(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])\", \"name\": \"constant.numeric.other.separator.thousands.cs\" }] }, \"9\": { \"name\": \"constant.numeric.other.suffix.cs\" } }, \"match\": \"(\\\\G(?=[0-9.])(?!0[xXbB]))([0-9](?:[0-9]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)((?<!_)([eE])(\\\\+?)(\\\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)))?((?:(?:(?:(?:(?:[uU]|[uU]l)|[uU]L)|l[uU]?)|L[uU]?)|[fFdDmM])(?!\\\\w))?$\" }, { \"match\": \"(?:(?:[0-9a-zA-Z_]|_)|(?<=[eE])[+-]|\\\\.\\\\d)+\", \"name\": \"invalid.illegal.constant.numeric.cs\" }] }] } }, \"match\": \"(?<!\\\\w)\\\\.?\\\\d(?:(?:[0-9a-zA-Z_]|_)|(?<=[eE])[+-]|\\\\.\\\\d)*\" }, \"object-creation-expression\": { \"patterns\": [{ \"include\": \"#object-creation-expression-with-parameters\" }, { \"include\": \"#object-creation-expression-with-no-parameters\" }] }, \"object-creation-expression-with-no-parameters\": { \"captures\": { \"1\": { \"name\": \"keyword.operator.expression.new.cs\" }, \"2\": { \"patterns\": [{ \"include\": \"#type\" }] } }, \"match\": \"(?x)\\n(new)\\\\s+\\n(?<type_name>\\n(?:\\n(?:\\n(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\\\:\\\\:\\\\s*)?\\n(?<name_and_type_args>\\n\\\\g<identifier>\\\\s*\\n(?<type_args>\\\\s*<(?:[^<>]|\\\\g<type_args>)+>\\\\s*)?\\n)\\n(?:\\\\s*\\\\.\\\\s*\\\\g<name_and_type_args>)* |\\n(?<tuple>\\\\s*\\\\((?:[^\\\\(\\\\)]|\\\\g<tuple>)+\\\\))\\n)\\n(?:\\\\s*\\\\?\\\\s*)?\\n(?:\\\\s*\\n\\\\[\\n(?:\\\\s*,\\\\s*)*\\n\\\\]\\n\\\\s*\\n(?:\\\\?)?\\n\\\\s*\\n)*\\n)\\n)\\\\s*\\n(?=\\\\{|//|/\\\\*|$)\" }, \"object-creation-expression-with-parameters\": { \"begin\": \"(?x)\\n(new)(?:\\\\s+\\n(?<type_name>\\n(?:\\n(?:\\n(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\\\:\\\\:\\\\s*)?\\n(?<name_and_type_args>\\n\\\\g<identifier>\\\\s*\\n(?<type_args>\\\\s*<(?:[^<>]|\\\\g<type_args>)+>\\\\s*)?\\n)\\n(?:\\\\s*\\\\.\\\\s*\\\\g<name_and_type_args>)* |\\n(?<tuple>\\\\s*\\\\((?:[^\\\\(\\\\)]|\\\\g<tuple>)+\\\\))\\n)\\n(?:\\\\s*\\\\?\\\\s*)?\\n(?:\\\\s*\\n\\\\[\\n(?:\\\\s*,\\\\s*)*\\n\\\\]\\n\\\\s*\\n(?:\\\\?)?\\n\\\\s*\\n)*\\n)\\n))?\\\\s*\\n(?=\\\\()\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.operator.expression.new.cs\" }, \"2\": { \"patterns\": [{ \"include\": \"#type\" }] } }, \"end\": \"(?<=\\\\))\", \"patterns\": [{ \"include\": \"#argument-list\" }] }, \"operator-assignment\": { \"match\": \"(?<!=|!)(=)(?!=)\", \"name\": \"keyword.operator.assignment.cs\" }, \"operator-declaration\": { \"begin\": \"(?x)\\n(?<type_name>\\n(?:\\n(?:ref\\\\s+(?:readonly\\\\s+)?)?\\n(?:\\n(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\\\:\\\\:\\\\s*)?\\n(?<name_and_type_args>\\n\\\\g<identifier>\\\\s*\\n(?<type_args>\\\\s*<(?:[^<>]|\\\\g<type_args>)+>\\\\s*)?\\n)\\n(?:\\\\s*\\\\.\\\\s*\\\\g<name_and_type_args>)* |\\n(?<tuple>\\\\s*\\\\((?:[^\\\\(\\\\)]|\\\\g<tuple>)+\\\\))\\n)\\n(?:\\\\s*\\\\?\\\\s*)?\\n(?:\\\\s*\\n\\\\[\\n(?:\\\\s*,\\\\s*)*\\n\\\\]\\n\\\\s*\\n(?:\\\\?)?\\n\\\\s*\\n)*\\n)\\n)\\\\s*\\n\\\\b(?<operator_keyword>operator)\\\\b\\\\s*\\n(?<operator>[+\\\\-*/%&|\\\\^!=~<>]+|true|false)\\\\s*\\n(?=\\\\()\", \"beginCaptures\": { \"1\": { \"patterns\": [{ \"include\": \"#type\" }] }, \"6\": { \"name\": \"storage.type.operator.cs\" }, \"7\": { \"name\": \"entity.name.function.cs\" } }, \"end\": \"(?<=\\\\})|(?=;)\", \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#parenthesized-parameter-list\" }, { \"include\": \"#expression-body\" }, { \"include\": \"#block\" }] }, \"orderby-clause\": { \"begin\": \"\\\\b(orderby)\\\\b\\\\s*\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.operator.expression.query.orderby.cs\" } }, \"end\": \"(?=;|\\\\))\", \"patterns\": [{ \"include\": \"#ordering-direction\" }, { \"include\": \"#query-body\" }, { \"include\": \"#expression\" }, { \"include\": \"#punctuation-comma\" }] }, \"ordering-direction\": { \"captures\": { \"1\": { \"name\": \"keyword.operator.expression.query.$1.cs\" } }, \"match\": \"\\\\b(ascending|descending)\\\\b\" }, \"parameter\": { \"captures\": { \"1\": { \"name\": \"storage.modifier.$1.cs\" }, \"2\": { \"patterns\": [{ \"include\": \"#type\" }] }, \"7\": { \"name\": \"entity.name.variable.parameter.cs\" } }, \"match\": \"(?x)\\n(?:(?:\\\\b(ref|params|out|in|this)\\\\b)\\\\s+)?\\n(?<type_name>\\n(?:\\n(?:ref\\\\s+)?\\n(?:\\n(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\\\:\\\\:\\\\s*)?\\n(?<name_and_type_args>\\n\\\\g<identifier>\\\\s*\\n(?<type_args>\\\\s*<(?:[^<>]|\\\\g<type_args>)+>\\\\s*)?\\n)\\n(?:\\\\s*\\\\.\\\\s*\\\\g<name_and_type_args>)* |\\n(?<tuple>\\\\s*\\\\((?:[^()]|\\\\g<tuple>)+\\\\))\\n)\\n(?:\\\\s*\\\\?\\\\s*)?\\n(?:\\\\s*\\n\\\\[\\n(?:\\\\s*,\\\\s*)*\\n\\\\]\\n\\\\s*\\n(?:\\\\?)?\\n\\\\s*\\n)*\\n)\\n)\\\\s+\\n(\\\\g<identifier>)\" }, \"parenthesized-expression\": { \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.open.cs\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"patterns\": [{ \"include\": \"#expression\" }] }, \"parenthesized-parameter-list\": { \"begin\": \"(\\\\()\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.open.cs\" } }, \"end\": \"(\\\\))\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#attribute-section\" }, { \"include\": \"#parameter\" }, { \"include\": \"#punctuation-comma\" }, { \"include\": \"#variable-initializer\" }] }, \"pattern\": { \"patterns\": [{ \"include\": \"#intrusive\" }, { \"include\": \"#combinator-pattern\" }, { \"include\": \"#discard-pattern\" }, { \"include\": \"#constant-pattern\" }, { \"include\": \"#relational-pattern\" }, { \"include\": \"#var-pattern\" }, { \"include\": \"#type-pattern\" }, { \"include\": \"#positional-pattern\" }, { \"include\": \"#property-pattern\" }, { \"include\": \"#list-pattern\" }, { \"include\": \"#slice-pattern\" }] }, \"positional-pattern\": { \"begin\": \"(?=\\\\()\", \"end\": \"(?=[)}\\\\],;:?=&|^]|!=|\\\\b(and|or|when)\\\\b)\", \"patterns\": [{ \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.open.cs\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"patterns\": [{ \"include\": \"#subpattern\" }, { \"include\": \"#punctuation-comma\" }] }, { \"begin\": \"(?<=\\\\))\", \"end\": \"(?=[)}\\\\],;:?=&|^]|!=|\\\\b(and|or|when)\\\\b)\", \"patterns\": [{ \"include\": \"#intrusive\" }, { \"include\": \"#property-pattern\" }, { \"include\": \"#simple-designation-pattern\" }] }] }, \"preprocessor\": { \"begin\": \"^\\\\s*(\\\\#)\\\\s*\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.separator.hash.cs\" } }, \"end\": \"(?<=$)\", \"name\": \"meta.preprocessor.cs\", \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#preprocessor-define-or-undef\" }, { \"include\": \"#preprocessor-if-or-elif\" }, { \"include\": \"#preprocessor-else-or-endif\" }, { \"include\": \"#preprocessor-warning-or-error\" }, { \"include\": \"#preprocessor-region\" }, { \"include\": \"#preprocessor-endregion\" }, { \"include\": \"#preprocessor-load\" }, { \"include\": \"#preprocessor-r\" }, { \"include\": \"#preprocessor-line\" }, { \"include\": \"#preprocessor-pragma-warning\" }, { \"include\": \"#preprocessor-pragma-checksum\" }] }, \"preprocessor-define-or-undef\": { \"captures\": { \"1\": { \"name\": \"keyword.preprocessor.define.cs\" }, \"2\": { \"name\": \"keyword.preprocessor.undef.cs\" }, \"3\": { \"name\": \"entity.name.variable.preprocessor.symbol.cs\" } }, \"match\": \"\\\\b(?:(define)|(undef))\\\\b\\\\s*\\\\b([_[:alpha:]][_[:alnum:]]*)\\\\b\" }, \"preprocessor-else-or-endif\": { \"captures\": { \"1\": { \"name\": \"keyword.preprocessor.else.cs\" }, \"2\": { \"name\": \"keyword.preprocessor.endif.cs\" } }, \"match\": \"\\\\b(?:(else)|(endif))\\\\b\" }, \"preprocessor-endregion\": { \"captures\": { \"1\": { \"name\": \"keyword.preprocessor.endregion.cs\" } }, \"match\": \"\\\\b(endregion)\\\\b\" }, \"preprocessor-expression\": { \"patterns\": [{ \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.open.cs\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"patterns\": [{ \"include\": \"#preprocessor-expression\" }] }, { \"captures\": { \"1\": { \"name\": \"constant.language.boolean.true.cs\" }, \"2\": { \"name\": \"constant.language.boolean.false.cs\" }, \"3\": { \"name\": \"entity.name.variable.preprocessor.symbol.cs\" } }, \"match\": \"\\\\b(?:(true)|(false)|([_[:alpha:]][_[:alnum:]]*))\\\\b\" }, { \"captures\": { \"1\": { \"name\": \"keyword.operator.comparison.cs\" }, \"2\": { \"name\": \"keyword.operator.logical.cs\" } }, \"match\": \"(==|!=)|(\\\\!|&&|\\\\|\\\\|)\" }] }, \"preprocessor-if-or-elif\": { \"begin\": \"\\\\b(?:(if)|(elif))\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.preprocessor.if.cs\" }, \"2\": { \"name\": \"keyword.preprocessor.elif.cs\" } }, \"end\": \"(?=$)\", \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#preprocessor-expression\" }] }, \"preprocessor-line\": { \"begin\": \"\\\\b(line)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.preprocessor.line.cs\" } }, \"end\": \"(?=$)\", \"patterns\": [{ \"captures\": { \"1\": { \"name\": \"keyword.preprocessor.default.cs\" }, \"2\": { \"name\": \"keyword.preprocessor.hidden.cs\" } }, \"match\": \"\\\\b(?:(default|hidden))\" }, { \"captures\": { \"0\": { \"name\": \"constant.numeric.decimal.cs\" } }, \"match\": \"[0-9]+\" }, { \"captures\": { \"0\": { \"name\": \"string.quoted.double.cs\" } }, \"match\": '\\\\\"[^\"]*\\\\\"' }] }, \"preprocessor-load\": { \"begin\": \"\\\\b(load)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.preprocessor.load.cs\" } }, \"end\": \"(?=$)\", \"patterns\": [{ \"captures\": { \"0\": { \"name\": \"string.quoted.double.cs\" } }, \"match\": '\\\\\"[^\"]*\\\\\"' }] }, \"preprocessor-pragma-checksum\": { \"captures\": { \"1\": { \"name\": \"keyword.preprocessor.pragma.cs\" }, \"2\": { \"name\": \"keyword.preprocessor.checksum.cs\" }, \"3\": { \"name\": \"string.quoted.double.cs\" }, \"4\": { \"name\": \"string.quoted.double.cs\" }, \"5\": { \"name\": \"string.quoted.double.cs\" } }, \"match\": '\\\\b(pragma)\\\\b\\\\s*\\\\b(checksum)\\\\b\\\\s*(\\\\\"[^\"]*\\\\\")\\\\s*(\\\\\"[^\"]*\\\\\")\\\\s*(\\\\\"[^\"]*\\\\\")' }, \"preprocessor-pragma-warning\": { \"captures\": { \"1\": { \"name\": \"keyword.preprocessor.pragma.cs\" }, \"2\": { \"name\": \"keyword.preprocessor.warning.cs\" }, \"3\": { \"name\": \"keyword.preprocessor.disable.cs\" }, \"4\": { \"name\": \"keyword.preprocessor.restore.cs\" }, \"5\": { \"patterns\": [{ \"captures\": { \"0\": { \"name\": \"constant.numeric.decimal.cs\" } }, \"match\": \"[0-9]+\" }, { \"include\": \"#punctuation-comma\" }] } }, \"match\": \"\\\\b(pragma)\\\\b\\\\s*\\\\b(warning)\\\\b\\\\s*\\\\b(?:(disable)|(restore))\\\\b(\\\\s*[0-9]+(?:\\\\s*,\\\\s*[0-9]+)?)?\" }, \"preprocessor-r\": { \"begin\": \"\\\\b(r)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.preprocessor.r.cs\" } }, \"end\": \"(?=$)\", \"patterns\": [{ \"captures\": { \"0\": { \"name\": \"string.quoted.double.cs\" } }, \"match\": '\\\\\"[^\"]*\\\\\"' }] }, \"preprocessor-region\": { \"captures\": { \"1\": { \"name\": \"keyword.preprocessor.region.cs\" }, \"2\": { \"name\": \"string.unquoted.preprocessor.message.cs\" } }, \"match\": \"\\\\b(region)\\\\b\\\\s*(.*)(?=$)\" }, \"preprocessor-warning-or-error\": { \"captures\": { \"1\": { \"name\": \"keyword.preprocessor.warning.cs\" }, \"2\": { \"name\": \"keyword.preprocessor.error.cs\" }, \"3\": { \"name\": \"string.unquoted.preprocessor.message.cs\" } }, \"match\": \"\\\\b(?:(warning)|(error))\\\\b\\\\s*(.*)(?=$)\" }, \"property-accessors\": { \"begin\": \"\\\\{\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.open.cs\" } }, \"end\": \"\\\\}\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.close.cs\" } }, \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#attribute-section\" }, { \"match\": \"\\\\b(private|protected|internal)\\\\b\", \"name\": \"storage.modifier.$1.cs\" }, { \"begin\": \"\\\\b(get)\\\\b\\\\s*(?=\\\\{|;|=>|//|/\\\\*|$)\", \"beginCaptures\": { \"1\": { \"name\": \"storage.type.accessor.$1.cs\" } }, \"end\": \"(?<=\\\\}|;)|(?=\\\\})\", \"patterns\": [{ \"include\": \"#accessor-getter\" }] }, { \"begin\": \"\\\\b(set|init)\\\\b\\\\s*(?=\\\\{|;|=>|//|/\\\\*|$)\", \"beginCaptures\": { \"1\": { \"name\": \"storage.type.accessor.$1.cs\" } }, \"end\": \"(?<=\\\\}|;)|(?=\\\\})\", \"patterns\": [{ \"include\": \"#accessor-setter\" }] }] }, \"property-declaration\": { \"begin\": \"(?x)\\n\\n# The negative lookahead below ensures that we don't match nested types\\n# or other declarations as properties.\\n(?![[:word:][:space:]]*\\\\b(?:class|interface|struct|enum|event)\\\\b)\\n\\n(?<return_type>\\n(?<type_name>\\n(?:\\n(?:ref\\\\s+(?:readonly\\\\s+)?)?\\n(?:\\n(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\\\:\\\\:\\\\s*)?\\n(?<name_and_type_args>\\n\\\\g<identifier>\\\\s*\\n(?<type_args>\\\\s*<(?:[^<>]|\\\\g<type_args>)+>\\\\s*)?\\n)\\n(?:\\\\s*\\\\.\\\\s*\\\\g<name_and_type_args>)* |\\n(?<tuple>\\\\s*\\\\((?:[^\\\\(\\\\)]|\\\\g<tuple>)+\\\\))\\n)\\n(?:\\\\s*\\\\?\\\\s*)?\\n(?:\\\\s*\\n\\\\[\\n(?:\\\\s*,\\\\s*)*\\n\\\\]\\n\\\\s*\\n(?:\\\\?)?\\n\\\\s*\\n)*\\n)\\n)\\\\s+\\n)\\n(?<interface_name>\\\\g<type_name>\\\\s*\\\\.\\\\s*)?\\n(?<property_name>\\\\g<identifier>)\\\\s*\\n(?=\\\\{|=>|//|/\\\\*|$)\", \"beginCaptures\": { \"1\": { \"patterns\": [{ \"include\": \"#type\" }] }, \"7\": { \"patterns\": [{ \"include\": \"#type\" }, { \"include\": \"#punctuation-accessor\" }] }, \"8\": { \"name\": \"entity.name.variable.property.cs\" } }, \"end\": \"(?<=\\\\})|(?=;)\", \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#property-accessors\" }, { \"include\": \"#accessor-getter-expression\" }, { \"include\": \"#variable-initializer\" }, { \"include\": \"#class-or-struct-members\" }] }, \"property-pattern\": { \"begin\": \"(?={)\", \"end\": \"(?=[)}\\\\],;:?=&|^]|!=|\\\\b(and|or|when)\\\\b)\", \"patterns\": [{ \"begin\": \"\\\\{\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.open.cs\" } }, \"end\": \"\\\\}\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.close.cs\" } }, \"patterns\": [{ \"include\": \"#subpattern\" }, { \"include\": \"#punctuation-comma\" }] }, { \"begin\": \"(?<=\\\\})\", \"end\": \"(?=[)}\\\\],;:?=&|^]|!=|\\\\b(and|or|when)\\\\b)\", \"patterns\": [{ \"include\": \"#intrusive\" }, { \"include\": \"#simple-designation-pattern\" }] }] }, \"punctuation-accessor\": { \"match\": \"\\\\.\", \"name\": \"punctuation.accessor.cs\" }, \"punctuation-comma\": { \"match\": \",\", \"name\": \"punctuation.separator.comma.cs\" }, \"punctuation-semicolon\": { \"match\": \";\", \"name\": \"punctuation.terminator.statement.cs\" }, \"query-body\": { \"patterns\": [{ \"include\": \"#let-clause\" }, { \"include\": \"#where-clause\" }, { \"include\": \"#join-clause\" }, { \"include\": \"#orderby-clause\" }, { \"include\": \"#select-clause\" }, { \"include\": \"#group-clause\" }] }, \"query-expression\": { \"begin\": \"(?x)\\n\\\\b(from)\\\\b\\\\s*\\n(?<type_name>\\n(?:\\n(?:\\n(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\\\:\\\\:\\\\s*)?\\n(?<name_and_type_args>\\n\\\\g<identifier>\\\\s*\\n(?<type_args>\\\\s*<(?:[^<>]|\\\\g<type_args>)+>\\\\s*)?\\n)\\n(?:\\\\s*\\\\.\\\\s*\\\\g<name_and_type_args>)* |\\n(?<tuple>\\\\s*\\\\((?:[^\\\\(\\\\)]|\\\\g<tuple>)+\\\\))\\n)\\n(?:\\\\s*\\\\?\\\\s*)?\\n(?:\\\\s*\\n\\\\[\\n(?:\\\\s*,\\\\s*)*\\n\\\\]\\n\\\\s*\\n(?:\\\\?)?\\n\\\\s*\\n)*\\n)\\n)?\\n\\\\s+(\\\\g<identifier>)\\\\b\\\\s*\\n\\\\b(in)\\\\b\\\\s*\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.operator.expression.query.from.cs\" }, \"2\": { \"patterns\": [{ \"include\": \"#type\" }] }, \"7\": { \"name\": \"entity.name.variable.range-variable.cs\" }, \"8\": { \"name\": \"keyword.operator.expression.query.in.cs\" } }, \"end\": \"(?=;|\\\\))\", \"patterns\": [{ \"include\": \"#query-body\" }, { \"include\": \"#expression\" }] }, \"raw-interpolated-string\": { \"patterns\": [{ \"include\": \"#raw-interpolated-string-five-or-more-quote-one-or-more-interpolation\" }, { \"include\": \"#raw-interpolated-string-three-or-more-quote-three-or-more-interpolation\" }, { \"include\": \"#raw-interpolated-string-quadruple-quote-double-interpolation\" }, { \"include\": \"#raw-interpolated-string-quadruple-quote-single-interpolation\" }, { \"include\": \"#raw-interpolated-string-triple-quote-double-interpolation\" }, { \"include\": \"#raw-interpolated-string-triple-quote-single-interpolation\" }] }, \"raw-interpolated-string-five-or-more-quote-one-or-more-interpolation\": { \"begin\": '\\\\$+\"\"\"\"\"+', \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.begin.cs\" } }, \"end\": '\"\"\"\"\"+', \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.end.cs\" } }, \"name\": \"string.quoted.double.cs\" }, \"raw-interpolated-string-quadruple-quote-double-interpolation\": { \"begin\": '\\\\$\\\\$\"\"\"\"', \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.begin.cs\" } }, \"end\": '\"\"\"\"', \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.end.cs\" } }, \"name\": \"string.quoted.double.cs\", \"patterns\": [{ \"include\": \"#double-raw-interpolation\" }] }, \"raw-interpolated-string-quadruple-quote-single-interpolation\": { \"begin\": '\\\\$\"\"\"\"', \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.begin.cs\" } }, \"end\": '\"\"\"\"', \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.end.cs\" } }, \"name\": \"string.quoted.double.cs\", \"patterns\": [{ \"include\": \"#raw-interpolation\" }] }, \"raw-interpolated-string-three-or-more-quote-three-or-more-interpolation\": { \"begin\": '\\\\$\\\\$\\\\$+\"\"\"+', \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.begin.cs\" } }, \"end\": '\"\"\"+', \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.end.cs\" } }, \"name\": \"string.quoted.double.cs\" }, \"raw-interpolated-string-triple-quote-double-interpolation\": { \"begin\": '\\\\$\\\\$\"\"\"', \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.begin.cs\" } }, \"end\": '\"\"\"', \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.end.cs\" } }, \"name\": \"string.quoted.double.cs\", \"patterns\": [{ \"include\": \"#double-raw-interpolation\" }] }, \"raw-interpolated-string-triple-quote-single-interpolation\": { \"begin\": '\\\\$\"\"\"', \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.begin.cs\" } }, \"end\": '\"\"\"', \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.end.cs\" } }, \"name\": \"string.quoted.double.cs\", \"patterns\": [{ \"include\": \"#raw-interpolation\" }] }, \"raw-interpolation\": { \"begin\": \"(?<=[^\\\\{]|^)((?:\\\\{)*)(\\\\{)(?=[^\\\\{])\", \"beginCaptures\": { \"1\": { \"name\": \"string.quoted.double.cs\" }, \"2\": { \"name\": \"punctuation.definition.interpolation.begin.cs\" } }, \"end\": \"\\\\}\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.interpolation.end.cs\" } }, \"name\": \"meta.interpolation.cs\", \"patterns\": [{ \"include\": \"#expression\" }] }, \"raw-string-literal\": { \"patterns\": [{ \"include\": \"#raw-string-literal-more\" }, { \"include\": \"#raw-string-literal-quadruple\" }, { \"include\": \"#raw-string-literal-triple\" }] }, \"raw-string-literal-more\": { \"begin\": '\"\"\"\"\"+', \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.begin.cs\" } }, \"end\": '\"\"\"\"\"+', \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.end.cs\" } }, \"name\": \"string.quoted.double.cs\" }, \"raw-string-literal-quadruple\": { \"begin\": '\"\"\"\"', \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.begin.cs\" } }, \"end\": '\"\"\"\"', \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.end.cs\" } }, \"name\": \"string.quoted.double.cs\" }, \"raw-string-literal-triple\": { \"begin\": '\"\"\"', \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.begin.cs\" } }, \"end\": '\"\"\"', \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.end.cs\" } }, \"name\": \"string.quoted.double.cs\" }, \"readonly-modifier\": { \"match\": \"\\\\breadonly\\\\b\", \"name\": \"storage.modifier.readonly.cs\" }, \"record-declaration\": { \"begin\": \"(?=\\\\brecord\\\\b)\", \"end\": \"(?<=\\\\})|(?=;)\", \"patterns\": [{ \"begin\": \"(?x)\\n(record)\\\\b\\\\s+\\n(@?[_[:alpha:]][_[:alnum:]]*)\", \"beginCaptures\": { \"1\": { \"name\": \"storage.type.record.cs\" }, \"2\": { \"name\": \"entity.name.type.class.cs\" } }, \"end\": \"(?=\\\\{)|(?=;)\", \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#type-parameter-list\" }, { \"include\": \"#parenthesized-parameter-list\" }, { \"include\": \"#base-types\" }, { \"include\": \"#generic-constraints\" }] }, { \"begin\": \"\\\\{\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.open.cs\" } }, \"end\": \"\\\\}\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.close.cs\" } }, \"patterns\": [{ \"include\": \"#class-or-struct-members\" }] }, { \"include\": \"#preprocessor\" }, { \"include\": \"#comment\" }] }, \"ref-modifier\": { \"match\": \"\\\\bref\\\\b\", \"name\": \"storage.modifier.ref.cs\" }, \"relational-pattern\": { \"begin\": \"<=?|>=?\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.relational.cs\" } }, \"end\": \"(?=[)}\\\\],;:?=&|^]|!=|\\\\b(and|or|when)\\\\b)\", \"patterns\": [{ \"include\": \"#expression\" }] }, \"return-statement\": { \"begin\": \"(?<!\\\\.)\\\\b(return)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.flow.return.cs\" } }, \"end\": \"(?=[;}])\", \"patterns\": [{ \"include\": \"#ref-modifier\" }, { \"include\": \"#expression\" }] }, \"script-top-level\": { \"patterns\": [{ \"include\": \"#statement\" }, { \"include\": \"#method-declaration\" }, { \"include\": \"#punctuation-semicolon\" }] }, \"select-clause\": { \"begin\": \"\\\\b(select)\\\\b\\\\s*\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.operator.expression.query.select.cs\" } }, \"end\": \"(?=;|\\\\))\", \"patterns\": [{ \"include\": \"#query-body\" }, { \"include\": \"#expression\" }] }, \"simple-designation-pattern\": { \"patterns\": [{ \"include\": \"#discard-pattern\" }, { \"match\": \"@?[_[:alpha:]][_[:alnum:]]*\", \"name\": \"entity.name.variable.local.cs\" }] }, \"slice-pattern\": { \"match\": \"\\\\.\\\\.\", \"name\": \"keyword.operator.range.cs\" }, \"statement\": { \"patterns\": [{ \"include\": \"#preprocessor\" }, { \"include\": \"#comment\" }, { \"include\": \"#while-statement\" }, { \"include\": \"#do-statement\" }, { \"include\": \"#for-statement\" }, { \"include\": \"#foreach-statement\" }, { \"include\": \"#if-statement\" }, { \"include\": \"#else-part\" }, { \"include\": \"#goto-statement\" }, { \"include\": \"#return-statement\" }, { \"include\": \"#break-or-continue-statement\" }, { \"include\": \"#throw-statement\" }, { \"include\": \"#yield-statement\" }, { \"include\": \"#await-statement\" }, { \"include\": \"#try-statement\" }, { \"include\": \"#expression-operator-expression\" }, { \"include\": \"#context-control-statement\" }, { \"include\": \"#context-control-paren-statement\" }, { \"include\": \"#labeled-statement\" }, { \"include\": \"#object-creation-expression\" }, { \"include\": \"#array-creation-expression\" }, { \"include\": \"#anonymous-object-creation-expression\" }, { \"include\": \"#local-declaration\" }, { \"include\": \"#block\" }, { \"include\": \"#expression\" }, { \"include\": \"#punctuation-semicolon\" }] }, \"storage-modifier\": { \"match\": \"(?<!\\\\.)\\\\b(new|public|protected|internal|private|abstract|virtual|override|sealed|static|partial|readonly|volatile|const|extern|async|unsafe|ref|required|file)\\\\b\", \"name\": \"storage.modifier.$1.cs\" }, \"string-character-escape\": { \"match\": \"\\\\\\\\(x[0-9a-fA-F]{1,4}|U[0-9a-fA-F]{8}|u[0-9a-fA-F]{4}|.)\", \"name\": \"constant.character.escape.cs\" }, \"string-literal\": { \"begin\": '(?<!@)\"', \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.begin.cs\" } }, \"end\": '(\")|((?:[^\\\\\\\\\\\\n])$)', \"endCaptures\": { \"1\": { \"name\": \"punctuation.definition.string.end.cs\" }, \"2\": { \"name\": \"invalid.illegal.newline.cs\" } }, \"name\": \"string.quoted.double.cs\", \"patterns\": [{ \"include\": \"#string-character-escape\" }] }, \"struct-declaration\": { \"begin\": \"(?=(\\\\brecord\\\\b\\\\s+)?\\\\bstruct\\\\b)\", \"end\": \"(?<=\\\\})|(?=;)\", \"patterns\": [{ \"begin\": \"(?x)\\n(\\\\b(record)\\\\b\\\\s+)?\\n(struct)\\\\b\\\\s+\\n(@?[_[:alpha:]][_[:alnum:]]*)\", \"beginCaptures\": { \"2\": { \"name\": \"storage.type.record.cs\" }, \"3\": { \"name\": \"storage.type.struct.cs\" }, \"4\": { \"name\": \"entity.name.type.struct.cs\" } }, \"end\": \"(?=\\\\{)|(?=;)\", \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#type-parameter-list\" }, { \"include\": \"#parenthesized-parameter-list\" }, { \"include\": \"#base-types\" }, { \"include\": \"#generic-constraints\" }] }, { \"begin\": \"\\\\{\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.open.cs\" } }, \"end\": \"\\\\}\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.close.cs\" } }, \"patterns\": [{ \"include\": \"#class-or-struct-members\" }] }, { \"include\": \"#preprocessor\" }, { \"include\": \"#comment\" }] }, \"subpattern\": { \"patterns\": [{ \"captures\": { \"1\": { \"patterns\": [{ \"match\": \"\\\\@?[_[:alpha:]][_[:alnum:]]*\", \"name\": \"variable.other.object.property.cs\" }, { \"include\": \"#punctuation-accessor\" }] }, \"2\": { \"name\": \"punctuation.separator.colon.cs\" } }, \"match\": \"(@?[_[:alpha:]][_[:alnum:]]*(?:\\\\s*\\\\.\\\\s*@?[_[:alpha:]][_[:alnum:]]*)*)\\\\s*(:)\" }, { \"include\": \"#pattern\" }] }, \"switch-expression\": { \"begin\": \"\\\\{\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.open.cs\" } }, \"end\": \"\\\\}\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.close.cs\" } }, \"patterns\": [{ \"include\": \"#punctuation-comma\" }, { \"begin\": \"=>\", \"beginCaptures\": { \"0\": { \"name\": \"keyword.operator.arrow.cs\" } }, \"end\": \"(?=,|})\", \"patterns\": [{ \"include\": \"#expression\" }] }, { \"begin\": \"\\\\b(when)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.conditional.when.cs\" } }, \"end\": \"(?==>|,|})\", \"patterns\": [{ \"include\": \"#case-guard\" }] }, { \"begin\": \"(?!\\\\s)\", \"end\": \"(?=\\\\bwhen\\\\b|=>|,|})\", \"patterns\": [{ \"include\": \"#pattern\" }] }] }, \"switch-label\": { \"begin\": \"\\\\b(case|default)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.conditional.$1.cs\" } }, \"end\": \"(:)|(?=})\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.separator.colon.cs\" } }, \"patterns\": [{ \"begin\": \"\\\\b(when)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.conditional.when.cs\" } }, \"end\": \"(?=:|})\", \"patterns\": [{ \"include\": \"#case-guard\" }] }, { \"begin\": \"(?!\\\\s)\", \"end\": \"(?=\\\\bwhen\\\\b|:|})\", \"patterns\": [{ \"include\": \"#pattern\" }] }] }, \"switch-statement\": { \"patterns\": [{ \"include\": \"#intrusive\" }, { \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.open.cs\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"patterns\": [{ \"include\": \"#expression\" }] }, { \"begin\": \"\\\\{\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.open.cs\" } }, \"end\": \"\\\\}\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.curlybrace.close.cs\" } }, \"patterns\": [{ \"include\": \"#switch-label\" }, { \"include\": \"#statement\" }] }] }, \"switch-statement-or-expression\": { \"begin\": \"(?<!\\\\.)\\\\b(switch)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.conditional.switch.cs\" } }, \"end\": \"(?<=})|(?=})\", \"patterns\": [{ \"include\": \"#intrusive\" }, { \"begin\": \"(?=\\\\()\", \"end\": \"(?<=\\\\})|(?=\\\\})\", \"patterns\": [{ \"include\": \"#switch-statement\" }] }, { \"begin\": \"(?=\\\\{)\", \"end\": \"(?<=\\\\})|(?=\\\\})\", \"patterns\": [{ \"include\": \"#switch-expression\" }] }] }, \"throw-expression\": { \"captures\": { \"1\": { \"name\": \"keyword.control.flow.throw.cs\" } }, \"match\": \"\\\\b(throw)\\\\b\" }, \"throw-statement\": { \"begin\": \"(?<!\\\\.)\\\\b(throw)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.flow.throw.cs\" } }, \"end\": \"(?=[;}])\", \"patterns\": [{ \"include\": \"#expression\" }] }, \"try-block\": { \"begin\": \"(?<!\\\\.)\\\\b(try)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.exception.try.cs\" } }, \"end\": \"(?<=\\\\})\", \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#block\" }] }, \"try-statement\": { \"patterns\": [{ \"include\": \"#try-block\" }, { \"include\": \"#catch-clause\" }, { \"include\": \"#finally-clause\" }] }, \"tuple-declaration-deconstruction-element-list\": { \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.open.cs\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#tuple-declaration-deconstruction-element-list\" }, { \"include\": \"#declaration-expression-tuple\" }, { \"include\": \"#punctuation-comma\" }, { \"captures\": { \"1\": { \"name\": \"entity.name.variable.tuple-element.cs\" } }, \"match\": \"(?x)\\n(@?[_[:alpha:]][_[:alnum:]]*)\\\\b\\\\s*\\n(?=[,)])\" }] }, \"tuple-deconstruction-assignment\": { \"captures\": { \"1\": { \"patterns\": [{ \"include\": \"#tuple-deconstruction-element-list\" }] } }, \"match\": \"(?x)\\n(?<tuple>\\\\s*\\\\((?:[^\\\\(\\\\)]|\\\\g<tuple>)+\\\\))\\\\s*\\n(?!=>|==)(?==)\" }, \"tuple-deconstruction-element-list\": { \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.open.cs\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#tuple-deconstruction-element-list\" }, { \"include\": \"#declaration-expression-tuple\" }, { \"include\": \"#punctuation-comma\" }, { \"captures\": { \"1\": { \"name\": \"variable.other.readwrite.cs\" } }, \"match\": \"(?x)\\n(@?[_[:alpha:]][_[:alnum:]]*)\\\\b\\\\s*\\n(?=[,)])\" }] }, \"tuple-element\": { \"captures\": { \"1\": { \"patterns\": [{ \"include\": \"#type\" }] }, \"6\": { \"name\": \"entity.name.variable.tuple-element.cs\" } }, \"match\": \"(?x)\\n(?<type_name>\\n(?:\\n(?:\\n(?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\\\:\\\\:\\\\s*)?\\n(?<name_and_type_args>\\n\\\\g<identifier>\\\\s*\\n(?<type_args>\\\\s*<(?:[^<>]|\\\\g<type_args>)+>\\\\s*)?\\n)\\n(?:\\\\s*\\\\.\\\\s*\\\\g<name_and_type_args>)* |\\n(?<tuple>\\\\s*\\\\((?:[^\\\\(\\\\)]|\\\\g<tuple>)+\\\\))\\n)\\n(?:\\\\s*\\\\?\\\\s*)?\\n(?:\\\\s*\\n\\\\[\\n(?:\\\\s*,\\\\s*)*\\n\\\\]\\n\\\\s*\\n(?:\\\\?)?\\n\\\\s*\\n)*\\n)\\n)\\n(?:(?<tuple_name>\\\\g<identifier>)\\\\b)?\" }, \"tuple-literal\": { \"begin\": \"(\\\\()(?=.*[:,])\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.parenthesis.open.cs\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#tuple-literal-element\" }, { \"include\": \"#expression\" }, { \"include\": \"#punctuation-comma\" }] }, \"tuple-literal-element\": { \"begin\": \"(?x)\\n(@?[_[:alpha:]][_[:alnum:]]*)\\\\s*\\n(?=:)\", \"beginCaptures\": { \"1\": { \"name\": \"entity.name.variable.tuple-element.cs\" } }, \"end\": \"(:)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.separator.colon.cs\" } } }, \"tuple-type\": { \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.open.cs\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"patterns\": [{ \"include\": \"#tuple-element\" }, { \"include\": \"#punctuation-comma\" }] }, \"type\": { \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#ref-modifier\" }, { \"include\": \"#readonly-modifier\" }, { \"include\": \"#tuple-type\" }, { \"include\": \"#type-builtin\" }, { \"include\": \"#type-name\" }, { \"include\": \"#type-arguments\" }, { \"include\": \"#type-array-suffix\" }, { \"include\": \"#type-nullable-suffix\" }, { \"include\": \"#type-pointer-suffix\" }] }, \"type-arguments\": { \"begin\": \"<\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.typeparameters.begin.cs\" } }, \"end\": \">\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.typeparameters.end.cs\" } }, \"patterns\": [{ \"include\": \"#type\" }, { \"include\": \"#punctuation-comma\" }] }, \"type-array-suffix\": { \"begin\": \"\\\\[\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.squarebracket.open.cs\" } }, \"end\": \"\\\\]\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.squarebracket.close.cs\" } }, \"patterns\": [{ \"include\": \"#intrusive\" }, { \"include\": \"#punctuation-comma\" }] }, \"type-builtin\": { \"captures\": { \"1\": { \"name\": \"keyword.type.$1.cs\" } }, \"match\": \"\\\\b(bool|s?byte|u?short|n?u?int|u?long|float|double|decimal|char|string|object|void|dynamic)\\\\b\" }, \"type-declarations\": { \"patterns\": [{ \"include\": \"#preprocessor\" }, { \"include\": \"#comment\" }, { \"include\": \"#storage-modifier\" }, { \"include\": \"#class-declaration\" }, { \"include\": \"#delegate-declaration\" }, { \"include\": \"#enum-declaration\" }, { \"include\": \"#interface-declaration\" }, { \"include\": \"#struct-declaration\" }, { \"include\": \"#record-declaration\" }, { \"include\": \"#attribute-section\" }, { \"include\": \"#punctuation-semicolon\" }] }, \"type-name\": { \"patterns\": [{ \"captures\": { \"1\": { \"name\": \"entity.name.type.alias.cs\" }, \"2\": { \"name\": \"punctuation.separator.coloncolon.cs\" } }, \"match\": \"(@?[_[:alpha:]][_[:alnum:]]*)\\\\s*(\\\\:\\\\:)\" }, { \"captures\": { \"1\": { \"name\": \"entity.name.type.cs\" }, \"2\": { \"name\": \"punctuation.accessor.cs\" } }, \"match\": \"(@?[_[:alpha:]][_[:alnum:]]*)\\\\s*(\\\\.)\" }, { \"captures\": { \"1\": { \"name\": \"punctuation.accessor.cs\" }, \"2\": { \"name\": \"entity.name.type.cs\" } }, \"match\": \"(\\\\.)\\\\s*(@?[_[:alpha:]][_[:alnum:]]*)\" }, { \"match\": \"@?[_[:alpha:]][_[:alnum:]]*\", \"name\": \"entity.name.type.cs\" }] }, \"type-nullable-suffix\": { \"match\": \"\\\\?\", \"name\": \"punctuation.separator.question-mark.cs\" }, \"type-operator-expression\": { \"begin\": \"\\\\b(default|sizeof|typeof)\\\\s*(\\\\()\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.operator.expression.$1.cs\" }, \"2\": { \"name\": \"punctuation.parenthesis.open.cs\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"patterns\": [{ \"include\": \"#type\" }] }, \"type-parameter-list\": { \"begin\": \"\\\\<\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.typeparameters.begin.cs\" } }, \"end\": \"\\\\>\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.typeparameters.end.cs\" } }, \"patterns\": [{ \"match\": \"\\\\b(in|out)\\\\b\", \"name\": \"storage.modifier.$1.cs\" }, { \"match\": \"(@?[_[:alpha:]][_[:alnum:]]*)\\\\b\", \"name\": \"entity.name.type.type-parameter.cs\" }, { \"include\": \"#comment\" }, { \"include\": \"#punctuation-comma\" }, { \"include\": \"#attribute-section\" }] }, \"type-pattern\": { \"begin\": \"(?=@?[_[:alpha:]][_[:alnum:]]*)\", \"end\": \"(?=[)}\\\\],;:?=&|^]|!=|\\\\b(and|or|when)\\\\b)\", \"patterns\": [{ \"begin\": \"\\\\G\", \"end\": \"(?!\\\\G[@_[:alpha:]])(?=[\\\\({@_[:alpha:])}\\\\],;:=&|^]|(?:\\\\s|^)\\\\?|!=|\\\\b(and|or|when)\\\\b)\", \"patterns\": [{ \"include\": \"#intrusive\" }, { \"include\": \"#type-subpattern\" }] }, { \"begin\": \"(?=[\\\\({@_[:alpha:]])\", \"end\": \"(?=[)}\\\\],;:?=&|^]|!=|\\\\b(and|or|when)\\\\b)\", \"patterns\": [{ \"include\": \"#intrusive\" }, { \"include\": \"#positional-pattern\" }, { \"include\": \"#property-pattern\" }, { \"include\": \"#simple-designation-pattern\" }] }] }, \"type-pointer-suffix\": { \"match\": \"\\\\*\", \"name\": \"punctuation.separator.asterisk.cs\" }, \"type-subpattern\": { \"patterns\": [{ \"include\": \"#type-builtin\" }, { \"begin\": \"(@?[_[:alpha:]][_[:alnum:]]*)\\\\s*(::)\", \"beginCaptures\": { \"1\": { \"name\": \"entity.name.type.alias.cs\" }, \"2\": { \"name\": \"punctuation.separator.coloncolon.cs\" } }, \"end\": \"(?<=[_[:alnum:]])|(?=[.<\\\\[\\\\({)}\\\\],;:?=&|^]|!=|\\\\b(and|or|when)\\\\b)\", \"patterns\": [{ \"include\": \"#intrusive\" }, { \"match\": \"\\\\@?[_[:alpha:]][_[:alnum:]]*\", \"name\": \"entity.name.type.cs\" }] }, { \"match\": \"\\\\@?[_[:alpha:]][_[:alnum:]]*\", \"name\": \"entity.name.type.cs\" }, { \"begin\": \"\\\\.\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.accessor.cs\" } }, \"end\": \"(?<=[_[:alnum:]])|(?=[<\\\\[\\\\({)}\\\\],;:?=&|^]|!=|\\\\b(and|or|when)\\\\b)\", \"patterns\": [{ \"include\": \"#intrusive\" }, { \"match\": \"\\\\@?[_[:alpha:]][_[:alnum:]]*\", \"name\": \"entity.name.type.cs\" }] }, { \"include\": \"#type-arguments\" }, { \"include\": \"#type-array-suffix\" }, { \"match\": \"(?<!\\\\s)\\\\?\", \"name\": \"punctuation.separator.question-mark.cs\" }] }, \"using-directive\": { \"patterns\": [{ \"begin\": \"\\\\b(?:(global)\\\\s+)?(using)\\\\s+(static)\\\\b\\\\s*(?:(unsafe)\\\\b\\\\s*)?\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.other.directive.global.cs\" }, \"2\": { \"name\": \"keyword.other.directive.using.cs\" }, \"3\": { \"name\": \"keyword.other.directive.static.cs\" }, \"4\": { \"name\": \"storage.modifier.unsafe.cs\" } }, \"end\": \"(?=;)\", \"patterns\": [{ \"include\": \"#type\" }] }, { \"begin\": \"\\\\b(?:(global)\\\\s+)?(using)\\\\b\\\\s*(?:(unsafe)\\\\b\\\\s*)?(@?[_[:alpha:]][_[:alnum:]]*)\\\\s*(=)\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.other.directive.global.cs\" }, \"2\": { \"name\": \"keyword.other.directive.using.cs\" }, \"3\": { \"name\": \"storage.modifier.unsafe.cs\" }, \"4\": { \"name\": \"entity.name.type.alias.cs\" }, \"5\": { \"name\": \"keyword.operator.assignment.cs\" } }, \"end\": \"(?=;)\", \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#type\" }] }, { \"begin\": \"\\\\b(?:(global)\\\\s+)?(using)\\\\b\\\\s*+(?!\\\\(|var\\\\b)\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.other.directive.global.cs\" }, \"2\": { \"name\": \"keyword.other.directive.using.cs\" } }, \"end\": \"(?=;)\", \"patterns\": [{ \"include\": \"#comment\" }, { \"match\": \"\\\\@?[_[:alpha:]][_[:alnum:]]*\", \"name\": \"entity.name.type.namespace.cs\" }, { \"include\": \"#punctuation-accessor\" }, { \"include\": \"#operator-assignment\" }] }] }, \"using-statement\": { \"begin\": \"\\\\b(using)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.context.using.cs\" } }, \"end\": \"(?<=\\\\))|(?=;|})\", \"patterns\": [{ \"include\": \"#intrusive\" }, { \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.open.cs\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"patterns\": [{ \"include\": \"#intrusive\" }, { \"include\": \"#await-expression\" }, { \"include\": \"#local-variable-declaration\" }, { \"include\": \"#expression\" }] }, { \"include\": \"#local-variable-declaration\" }] }, \"var-pattern\": { \"begin\": \"\\\\b(var)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"storage.type.var.cs\" } }, \"end\": \"(?=[)}\\\\],;:?=&|^]|!=|\\\\b(and|or|when)\\\\b)\", \"patterns\": [{ \"include\": \"#designation-pattern\" }] }, \"variable-initializer\": { \"begin\": \"(?<!=|!)(=)(?!=|>)\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.operator.assignment.cs\" } }, \"end\": \"(?=[,\\\\)\\\\];}])\", \"patterns\": [{ \"include\": \"#ref-modifier\" }, { \"include\": \"#expression\" }] }, \"verbatim-interpolated-string\": { \"begin\": '(?:\\\\$@|@\\\\$)\"', \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.begin.cs\" } }, \"end\": '\"(?=[^\"])', \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.end.cs\" } }, \"name\": \"string.quoted.double.cs\", \"patterns\": [{ \"include\": \"#verbatim-string-character-escape\" }, { \"include\": \"#interpolation\" }] }, \"verbatim-string-character-escape\": { \"match\": '\"\"', \"name\": \"constant.character.escape.cs\" }, \"verbatim-string-literal\": { \"begin\": '@\"', \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.begin.cs\" } }, \"end\": '\"(?=[^\"])', \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.end.cs\" } }, \"name\": \"string.quoted.double.cs\", \"patterns\": [{ \"include\": \"#verbatim-string-character-escape\" }] }, \"when-clause\": { \"begin\": \"(?<!\\\\.)\\\\b(when)\\\\b\\\\s*(\\\\()\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.exception.when.cs\" }, \"2\": { \"name\": \"punctuation.parenthesis.open.cs\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"patterns\": [{ \"include\": \"#expression\" }, { \"include\": \"#comment\" }] }, \"where-clause\": { \"begin\": \"(?x)\\n\\\\b(where)\\\\b\\\\s*\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.operator.expression.query.where.cs\" } }, \"end\": \"(?=;|\\\\))\", \"patterns\": [{ \"include\": \"#query-body\" }, { \"include\": \"#expression\" }] }, \"while-statement\": { \"begin\": \"(?<!\\\\.)\\\\b(while)\\\\b\\\\s*(?=\\\\()\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.loop.while.cs\" } }, \"end\": \"(?<=\\\\})|(?=;)\", \"patterns\": [{ \"begin\": \"\\\\(\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.open.cs\" } }, \"end\": \"\\\\)\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.parenthesis.close.cs\" } }, \"patterns\": [{ \"include\": \"#expression\" }] }, { \"include\": \"#statement\" }] }, \"with-expression\": { \"begin\": \"(?<!\\\\.)\\\\b(with)\\\\b\\\\s*(?=\\\\{|//|/\\\\*|$)\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.operator.expression.with.cs\" } }, \"end\": \"(?<=\\\\})\", \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#initializer-expression\" }] }, \"xml-attribute\": { \"patterns\": [{ \"captures\": { \"1\": { \"name\": \"entity.other.attribute-name.cs\" }, \"2\": { \"name\": \"entity.other.attribute-name.namespace.cs\" }, \"3\": { \"name\": \"punctuation.separator.colon.cs\" }, \"4\": { \"name\": \"entity.other.attribute-name.localname.cs\" }, \"5\": { \"name\": \"punctuation.separator.equals.cs\" } }, \"match\": \"(?x)\\n(?:^|\\\\s+)\\n(\\n(?:\\n([-_[:alnum:]]+)\\n(:)\\n)?\\n([-_[:alnum:]]+)\\n)\\n(=)\" }, { \"include\": \"#xml-string\" }] }, \"xml-cdata\": { \"begin\": \"<!\\\\[CDATA\\\\[\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.begin.cs\" } }, \"end\": \"\\\\]\\\\]>\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.end.cs\" } }, \"name\": \"string.unquoted.cdata.cs\" }, \"xml-character-entity\": { \"patterns\": [{ \"captures\": { \"1\": { \"name\": \"punctuation.definition.constant.cs\" }, \"3\": { \"name\": \"punctuation.definition.constant.cs\" } }, \"match\": \"(?x)\\n(&)\\n(\\n(?:[[:alpha:]:_][[:alnum:]:_.-]*)|\\n(?:\\\\#[[:digit:]]+)|\\n(?:\\\\#x[[:xdigit:]]+)\\n)\\n(;)\", \"name\": \"constant.character.entity.cs\" }, { \"match\": \"&\", \"name\": \"invalid.illegal.bad-ampersand.cs\" }] }, \"xml-comment\": { \"begin\": \"<!--\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.comment.cs\" } }, \"end\": \"-->\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.comment.cs\" } }, \"name\": \"comment.block.cs\" }, \"xml-doc-comment\": { \"patterns\": [{ \"include\": \"#xml-comment\" }, { \"include\": \"#xml-character-entity\" }, { \"include\": \"#xml-cdata\" }, { \"include\": \"#xml-tag\" }] }, \"xml-string\": { \"patterns\": [{ \"begin\": \"\\\\'\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.begin.cs\" } }, \"end\": \"\\\\'\", \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.end.cs\" } }, \"name\": \"string.quoted.single.cs\", \"patterns\": [{ \"include\": \"#xml-character-entity\" }] }, { \"begin\": '\\\\\"', \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.begin.cs\" } }, \"end\": '\\\\\"', \"endCaptures\": { \"0\": { \"name\": \"punctuation.definition.string.end.cs\" } }, \"name\": \"string.quoted.double.cs\", \"patterns\": [{ \"include\": \"#xml-character-entity\" }] }] }, \"xml-tag\": { \"begin\": \"(?x)\\n(</?)\\n(\\n(?:\\n([-_[:alnum:]]+)\\n(:)\\n)?\\n([-_[:alnum:]]+)\\n)\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.definition.tag.cs\" }, \"2\": { \"name\": \"entity.name.tag.cs\" }, \"3\": { \"name\": \"entity.name.tag.namespace.cs\" }, \"4\": { \"name\": \"punctuation.separator.colon.cs\" }, \"5\": { \"name\": \"entity.name.tag.localname.cs\" } }, \"end\": \"(/?>)\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.definition.tag.cs\" } }, \"name\": \"meta.tag.cs\", \"patterns\": [{ \"include\": \"#xml-attribute\" }] }, \"yield-break-statement\": { \"captures\": { \"1\": { \"name\": \"keyword.control.flow.yield.cs\" }, \"2\": { \"name\": \"keyword.control.flow.break.cs\" } }, \"match\": \"(?<!\\\\.)\\\\b(yield)\\\\b\\\\s*\\\\b(break)\\\\b\" }, \"yield-return-statement\": { \"begin\": \"(?<!\\\\.)\\\\b(yield)\\\\b\\\\s*\\\\b(return)\\\\b\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.flow.yield.cs\" }, \"2\": { \"name\": \"keyword.control.flow.return.cs\" } }, \"end\": \"(?=[;}])\", \"patterns\": [{ \"include\": \"#expression\" }] }, \"yield-statement\": { \"patterns\": [{ \"include\": \"#yield-return-statement\" }, { \"include\": \"#yield-break-statement\" }] } }, \"scopeName\": \"source.cs\", \"aliases\": [\"c#\", \"cs\"] });\nvar csharp = [\n  lang\n];\n\nexport { csharp as default };\n"],"names":["lang","csharp"],"mappings":"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","x_google_ignoreList":[0]}