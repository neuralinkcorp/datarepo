{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#datarepo-a-simple-platform-for-complex-data","title":"datarepo: a simple platform for complex data","text":"<p><code>datarepo</code> is a simple query interface for multimodal data at any scale.</p> <p>With <code>datarepo</code>, you can define a catalog, databases, and tables to query any existing data source. Once you've defined your catalog, you can spin up a static site for easy browsing or a read-only API for programmatic access. No running servers or services!</p> <p>The <code>datarepo</code> catalog has native, declarative connectors to Delta Lake and Parquet stores. <code>datarepo</code> also supports defining tables via custom Python functions, so you can connect to any data source!</p> <p>Here's an example catalog:</p>"},{"location":"#key-features","title":"Key features","text":"<ul> <li>Unified interface: Query data across different storage modalities (Parquet, DeltaLake, relational databases)</li> <li>Declarative catalog syntax: Define catalogs in python without running services</li> <li>Catalog site generation: Generate a static site catalog for visual browsing</li> <li>Extensible: Declare tables as custom python functions for querying any data</li> <li>API support: Generate a YAML config for querying with ROAPI</li> <li>Fast: Uses Rust-native libraries such as polars, delta-rs, and Apache DataFusion for performant reads</li> </ul>"},{"location":"#philosophy","title":"Philosophy","text":"<p>Data engineering should be simple. That means:</p> <ol> <li>Scale up and scale down - tools should scale down to a developer's laptop and up to stateless clusters</li> <li>Prioritize local development experience - use composable libraries instead of distributed services</li> <li>Code as a catalog - define tables in code, generate a static site catalog and APIs without running services</li> </ol>"},{"location":"#quick-start","title":"Quick start","text":"<p>Install the latest version with:</p> <pre><code>pip install data-repo\n</code></pre>"},{"location":"#create-a-table-and-catalog","title":"Create a table and catalog","text":"<p>First, create a module to define your tables (e.g., <code>tpch_tables.py</code>):</p> <pre><code># tpch_tables.py\nfrom datarepo.core import (\n    DeltalakeTable,\n    ParquetTable,\n    Filter,\n    table,\n    NlkDataFrame,\n    Partition,\n    PartitioningScheme,\n)\nimport pyarrow as pa\nimport polars as pl\n\n# Delta Lake backed table\npart = DeltalakeTable(\n    name=\"part\",\n    uri=\"s3://my-bucket/tpc-h/part\",\n    schema=pa.schema(\n        [\n            (\"p_partkey\", pa.int64()),\n            (\"p_name\", pa.string()),\n            (\"p_mfgr\", pa.string()),\n            (\"p_brand\", pa.string()),\n            (\"p_type\", pa.string()),\n            (\"p_size\", pa.int32()),\n            (\"p_container\", pa.string()),\n            (\"p_retailprice\", pa.decimal128(12, 2)),\n            (\"p_comment\", pa.string()),\n        ]\n    ),\n    docs_filters=[\n        Filter(\"p_partkey\", \"=\", 1),\n        Filter(\"p_brand\", \"=\", \"Brand#1\"),\n    ],\n    unique_columns=[\"p_partkey\"],\n    description=\"\"\"\n    Part information from the TPC-H benchmark.\n    Contains details about parts including name, manufacturer, brand, and retail price.\n    \"\"\",\n    table_metadata_args={\n        \"data_input\": \"Part catalog data from manufacturing systems, updated daily\",\n        \"latency_info\": \"Daily batch updates from manufacturing ERP system\",\n        \"example_notebook\": \"https://example.com/notebooks/part_analysis.ipynb\",\n    },\n)\n\n# Table defined as a function\n@table(\n    data_input=\"Supplier master data from vendor management system &lt;code&gt;/api/suppliers/master&lt;/code&gt; endpoint\",\n    latency_info=\"Updated weekly by the supplier_master_sync DAG on Airflow\",\n)\ndef supplier() -&gt; NlkDataFrame:\n    \"\"\"Supplier information from the TPC-H benchmark.\"\"\"\n    data = {\n        \"s_suppkey\": [1, 2, 3, 4, 5],\n        \"s_name\": [\n            \"Supplier#1\",\n            \"Supplier#2\",\n        ],\n        \"s_address\": [\n            \"123 Main St\",\n            \"456 Oak Ave\",\n        ],\n        \"s_nationkey\": [1, 1],\n        \"s_phone\": [\"555-0001\", \"555-0002\"],\n        \"s_acctbal\": [1000.00, 2000.00],\n        \"s_comment\": [\"Comment 1\", \"Comment 2\"],\n    }\n    return pl.LazyFrame(data)\n</code></pre> <pre><code># tpch_catalog.py\nfrom datarepo.core import Catalog, ModuleDatabase\nimport tpch_tables\n\n# Create a catalog\ndbs = {\"tpc-h\": ModuleDatabase(tpch_tables)}\nTPCHCatalog = Catalog(dbs)\n</code></pre>"},{"location":"#query-the-data","title":"Query the data","text":"<pre><code>&gt;&gt;&gt; from tpch_catalog import TPCHCatalog\n&gt;&gt;&gt; from datarepo.core import Filter\n&gt;&gt;&gt;\n&gt;&gt;&gt; # Get part and supplier information\n&gt;&gt;&gt; part_data = TCPHCatalog.db(\"tpc-h\").table(\n...     \"part\",\n...     (\n...         Filter('p_partkey', 'in', [1, 2, 3, 4]),\n...         Filter('p_brand', 'in', ['Brand#1', 'Brand#2', 'Brand#3']),\n...     ),\n... )\n&gt;&gt;&gt;\n&gt;&gt;&gt; supplier_data = TCPHCatalog.db(\"tpc-h\").table(\"supplier\")\n&gt;&gt;&gt;\n&gt;&gt;&gt; # Join part and supplier data and select specific columns\n&gt;&gt;&gt; joined_data = part_data.join(\n...     supplier_data,\n...     left_on=\"p_partkey\",\n...     right_on=\"s_suppkey\",\n... ).select([\"p_name\", \"p_brand\", \"s_name\"]).collect()\n&gt;&gt;&gt;\n&gt;&gt;&gt; print(joined_data)\nshape: (4, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 p_name     \u2502 p_brand    \u2502 s_name     \u2502\n\u2502 ---        \u2502 ---        \u2502 ---        \u2502\n\u2502 str        \u2502 str        \u2502 str        \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Part#1     \u2502 Brand#1    \u2502 Supplier#1 \u2502\n\u2502 Part#2     \u2502 Brand#2    \u2502 Supplier#2 \u2502\n\u2502 Part#3     \u2502 Brand#3    \u2502 Supplier#3 \u2502\n\u2502 Part#4     \u2502 Brand#1    \u2502 Supplier#4 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"#generate-a-static-site-catalog","title":"Generate a static site catalog","text":"<p>You can export your catalog to a static site with a single command:</p> <pre><code># export.py\nfrom datarepo.export.web import export_and_generate_site\nfrom tpch_catalog import TPCHCatalog\n\n# Export and generate the site\nexport_and_generate_site(\n    catalogs=[(\"tpch\", TPCHCatalog)], output_dir=str(output_dir)\n)\n</code></pre>"},{"location":"#generate-an-api","title":"Generate an API","text":"<p>You can also generate a YAML configuration for ROAPI:</p> <pre><code>from datarepo.export import roapi\nfrom tpch_catalog import TPCHCatalog\n\n# Generate ROAPI config\nroapi.generate_config(TPCHCatalog, output_file=\"roapi-config.yaml\")\n</code></pre>"},{"location":"#about-neuralink","title":"About Neuralink","text":"<p><code>datarepo</code> is part of Neuralink's commitment to the open source community. By maintaining free and open source software, we aim to accelerate data engineering and biotechnology.</p> <p>Neuralink is creating a generalized brain interface to restore autonomy to those with unmet medical needs today, and to unlock human potential tomorrow.</p> <p>You don't have to be a brain surgeon to work at Neuralink. We are looking for exceptional individuals from many fields, including software and data engineering. Learn more at neuralink.com/careers.</p>"},{"location":"catalog/","title":"Web Catalog Example","text":"<p>See the example catalog here. This catalog is based off of the TPC-H Decision Support Benchmark.</p>"},{"location":"user-guide/","title":"User Guide","text":""},{"location":"user-guide/#core-concepts","title":"Core concepts","text":""},{"location":"user-guide/#tables","title":"Tables","text":"<p>A table in datarepo is a Python function that returns an <code>NlkDataFrame</code>. An <code>NlkDataFrame</code> is a thin wrapper of the polars LazyFrame. Tables are the fundamental building blocks for accessing and querying data. Tables can be backed by DeltaLake tables, Parquet tables, or pure Python functions.</p>"},{"location":"user-guide/#delta-lake-tables","title":"Delta Lake tables","text":"<pre><code>from datarepo.core import DeltalakeTable\nimport pyarrow as pa\n\n# Define the schema\nschema = pa.schema([\n    (\"p_partkey\", pa.int64()),\n    (\"p_name\", pa.string()),\n    (\"p_mfgr\", pa.string()),\n    (\"p_brand\", pa.string()),\n    (\"p_type\", pa.string()),\n    (\"p_size\", pa.int32()),\n    (\"p_container\", pa.string()),\n    (\"p_retailprice\", pa.decimal128(12, 2)),\n    (\"p_comment\", pa.string()),\n])\n\n# Create the table\npart = DeltalakeTable(\n    name=\"part\",\n    uri=\"s3://my-bucket/tpc-h/part\",\n    schema=schema,\n    docs_filters=[\n        Filter(\"p_partkey\", \"=\", 1),\n        Filter(\"p_brand\", \"=\", \"Brand#1\"),\n    ],\n    unique_columns=[\"p_partkey\"],\n    description=\"\"\"\n    Part information from the TPC-H benchmark.\n    Contains details about parts including name, manufacturer, brand, and retail price.\n    \"\"\",\n    table_metadata_args={\n        \"data_input\": \"Part catalog data from manufacturing systems, updated daily\",\n        \"latency_info\": \"Daily batch updates from manufacturing ERP system\",\n        \"example_notebook\": \"https://example.com/notebooks/part_analysis.ipynb\",\n    },\n)\n</code></pre>"},{"location":"user-guide/#parquet-tables","title":"Parquet tables","text":"<pre><code>from datarepo.core import ParquetTable, Partition, PartitioningScheme\nimport pyarrow as pa\n\n# Create the table\npartsupp = ParquetTable(\n    name=\"partsupp\",\n    uri=\"s3://my-bucket/tpc-h/partsupp\",\n    partitioning=[\n        Partition(column=\"ps_partkey\", col_type=pl.Int64),\n        Partition(column=\"ps_suppkey\", col_type=pl.Int64),\n    ],\n    partitioning_scheme=PartitioningScheme.HIVE,\n    docs_filters=[\n        Filter(\"ps_partkey\", \"=\", 1),\n        Filter(\"ps_suppkey\", \"=\", 1),\n    ],\n    description=\"\"\"\n    Part supplier information from the TPC-H benchmark.\n    Contains details about parts supplied by suppliers including available quantity and supply cost.\n    \"\"\",\n    table_metadata_args={\n        \"data_input\": \"Supplier inventory and pricing data from procurement systems\",\n        \"latency_info\": \"Real-time updates from supplier inventory management systems\",\n        \"example_notebook\": \"https://example.com/notebooks/supplier_analysis.ipynb\",\n    },\n)\n</code></pre>"},{"location":"user-guide/#function-tables","title":"Function tables","text":"<p>Function tables are created using the <code>@table</code> decorator and allow you to define custom data access logic:</p> <pre><code>from datarepo.core import table\nimport polars as pl\n\n@table(\n    data_input=\"Supplier master data from vendor management system &lt;code&gt;/api/suppliers/master&lt;/code&gt; endpoint\",\n    latency_info=\"Updated weekly by the supplier_master_sync DAG on Airflow\",\n)\ndef supplier() -&gt; NlkDataFrame:\n    \"\"\"Supplier information from the TPC-H benchmark.\"\"\"\n    data = {\n        \"s_suppkey\": [1, 2, 3, 4, 5],\n        \"s_name\": [\"Supplier#1\", \"Supplier#2\", \"Supplier#3\", \"Supplier#4\", \"Supplier#5\"],\n        \"s_address\": [\"123 Main St\", \"456 Oak Ave\", \"789 Pine Rd\", \"321 Elm St\", \"654 Maple Dr\"],\n        \"s_nationkey\": [1, 1, 2, 2, 3],\n        \"s_phone\": [\"555-0001\", \"555-0002\", \"555-0003\", \"555-0004\", \"555-0005\"],\n        \"s_acctbal\": [1000.00, 2000.00, 3000.00, 4000.00, 5000.00],\n        \"s_comment\": [\"Comment 1\", \"Comment 2\", \"Comment 3\", \"Comment 4\", \"Comment 5\"]\n    }\n    return NlkDataFrame(data)\n</code></pre>"},{"location":"user-guide/#databases","title":"Databases","text":"<p>A datarepo database is a Python module that contains tables. There are two main ways to create databases:</p>"},{"location":"user-guide/#module-database","title":"Module database","text":"<p>A module database wraps a Python module containing table definitions:</p> <pre><code># tpch_tables.py\nfrom datarepo.core import table\n\n@table\ndef supplier():\n    \"\"\"Supplier information.\"\"\"\n    return NlkDataFrame(...)\n\n@table\ndef partsupp():\n    \"\"\"Part supplier relationship information.\"\"\"\n    return NlkDataFrame(...)\n\n# Using the database\nfrom datarepo.core import ModuleDatabase\nimport tpch_tables\n\ndb = ModuleDatabase(tpch_tables)\n\n# Query data\n&gt;&gt;&gt; df = db.supplier()\n&gt;&gt;&gt; df.head()\nshape: (5, 7)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 s_suppkey\u2502 s_name    \u2502 s_address  \u2502 s_nationkey\u2502 s_phone  \u2502 s_acctbal\u2502 s_comment\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1        \u2502 Supplier#1\u2502 123 Main St\u2502 1          \u2502 555-0001 \u2502 1000.00  \u2502 Comment 1\u2502\n\u2502 2        \u2502 Supplier#2\u2502 456 Oak Ave\u2502 1          \u2502 555-0002 \u2502 2000.00  \u2502 Comment 2\u2502\n\u2502 3        \u2502 Supplier#3\u2502 789 Pine Rd\u2502 2          \u2502 555-0003 \u2502 3000.00  \u2502 Comment 3\u2502\n\u2502 4        \u2502 Supplier#4\u2502 321 Elm St \u2502 2          \u2502 555-0004 \u2502 4000.00  \u2502 Comment 4\u2502\n\u2502 5        \u2502 Supplier#5\u2502 654 Maple Dr\u2502 3         \u2502 555-0005 \u2502 5000.00  \u2502 Comment 5\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/#catalogs","title":"Catalogs","text":"<p>A catalog is a Python module that is a collection of databases.</p> <pre><code>from datarepo.core import Catalog, ModuleDatabase\nimport tpch_tables\n\n# Create a catalog\ndbs = {\"tpc-h\": ModuleDatabase(tpch_tables)}\nTPCHCatalog = Catalog(dbs)\n\n# Query data across databases\n&gt;&gt;&gt; supplier = TPCHCatalog.db(\"tpc-h\").supplier()\n&gt;&gt;&gt; partsupp = TPCHCatalog.db(\"tpc-h\").partsupp()\n\n# Join data across databases\n&gt;&gt;&gt; joined = supplier.join(partsupp, left_on=\"s_suppkey\", right_on=\"ps_suppkey\")\n&gt;&gt;&gt; joined.head()\nshape: (5, 12)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2510\n\u2502 s_suppkey\u2502 s_name    \u2502 s_address  \u2502 s_nationkey\u2502 s_phone  \u2502 s_acctbal\u2502 s_comment\u2502ps_partkey\u2502ps_suppkey\u2502ps_availqty \u2502ps_supplycost\u2502ps_comment \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1        \u2502 Supplier#1\u2502 123 Main St\u2502 1          \u2502 555-0001 \u2502 1000.00  \u2502 Comment 1\u2502 1        \u2502 1        \u2502 100        \u2502 100.00      \u2502 Part 1    \u2502\n\u2502 2        \u2502 Supplier#2\u2502 456 Oak Ave\u2502 1          \u2502 555-0002 \u2502 2000.00  \u2502 Comment 2\u2502 2        \u2502 2        \u2502 200        \u2502 200.00      \u2502 Part 2    \u2502\n\u2502 3        \u2502 Supplier#3\u2502 789 Pine Rd\u2502 2          \u2502 555-0003 \u2502 3000.00  \u2502 Comment 3\u2502 3        \u2502 3        \u2502 300        \u2502 300.00      \u2502 Part 3    \u2502\n\u2502 4        \u2502 Supplier#4\u2502 321 Elm St \u2502 2          \u2502 555-0004 \u2502 4000.00  \u2502 Comment 4\u2502 4        \u2502 4        \u2502 400        \u2502 400.00      \u2502 Part 4    \u2502\n\u2502 5        \u2502 Supplier#5\u2502 654 Maple D\u2502  3         \u2502 555-0005 \u2502 5000.00  \u2502 Comment 5\u2502 5        \u2502 5        \u2502 500        \u2502 500.00      \u2502 Part 5    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/#querying-data","title":"Querying data","text":"<p>datarepo provides a consistent interface for querying data across all table types:</p> <pre><code># Filter data\n&gt;&gt;&gt; df = db.supplier(filters=[(\"s_nationkey\", \"=\", 1)])\n\n# Select columns\n&gt;&gt;&gt; df = db.supplier(columns=[\"s_suppkey\", \"s_name\"])\n\n# Complex queries\n&gt;&gt;&gt; df = db.supplier(\n...     filters=[\n...         (\"s_nationkey\", \"=\", 1),\n...         (\"s_acctbal\", \"&gt;=\", 1000.00),\n...     ],\n...     columns=[\"s_suppkey\", \"s_name\", \"s_acctbal\"],\n... )\n</code></pre>"},{"location":"user-guide/#advanced-features","title":"Advanced features","text":""},{"location":"user-guide/#caching","title":"Caching","text":"<p>DeltaLake tables support caching to improve performance:</p> <pre><code>from datarepo.core.tables import DeltaCacheOptions\n\n# Configure caching\ncache_options = DeltaCacheOptions(\n    file_cache_path=\"~/.datarepo/cache\",\n    file_cache_last_checkpoint_valid_duration=\"30m\",\n)\n\n# Use caching\n&gt;&gt;&gt; df = db.supplier(cache_options=cache_options)\n</code></pre>"},{"location":"user-guide/#custom-columns","title":"Custom columns","text":"<p>You can add custom computed columns to tables:</p> <pre><code># Add a custom column\nsupplier = DeltalakeTable(\n    name=\"supplier\",\n    uri=\"s3://my-bucket/tpc-h/supplier\",\n    schema=schema,\n    extra_cols=[\n        (pl.col(\"s_acctbal\") * 1.1, \"s_acctbal_with_tax\"),\n    ],\n)\n\n# Query with custom column\n&gt;&gt;&gt; df = supplier(columns=[\"s_suppkey\", \"s_acctbal_with_tax\"])\n</code></pre>"}]}