{"version":3,"file":"scheme-1Je9_Reo.js","sources":["../../../../web_catalog/node_modules/shiki/dist/langs/scheme.mjs"],"sourcesContent":["const lang = Object.freeze({ \"displayName\": \"Scheme\", \"fileTypes\": [\"scm\", \"ss\", \"sch\", \"rkt\"], \"name\": \"scheme\", \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#block-comment\" }, { \"include\": \"#sexp\" }, { \"include\": \"#string\" }, { \"include\": \"#language-functions\" }, { \"include\": \"#quote\" }, { \"include\": \"#illegal\" }], \"repository\": { \"block-comment\": { \"begin\": \"\\\\#\\\\|\", \"contentName\": \"comment\", \"end\": \"\\\\|\\\\#\", \"name\": \"comment\", \"patterns\": [{ \"include\": \"#block-comment\", \"name\": \"comment\" }] }, \"comment\": { \"begin\": \"(^[ \\\\t]+)?(?=;)\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.whitespace.comment.leading.scheme\" } }, \"end\": \"(?!\\\\G)\", \"patterns\": [{ \"begin\": \";\", \"beginCaptures\": { \"0\": { \"name\": \"punctuation.definition.comment.scheme\" } }, \"end\": \"\\\\n\", \"name\": \"comment.line.semicolon.scheme\" }] }, \"constants\": { \"patterns\": [{ \"match\": \"#[t|f]\", \"name\": \"constant.language.boolean.scheme\" }, { \"match\": `(?<=[\\\\(\\\\s])((#e|#i)?[0-9]+(\\\\.[0-9]+)?|(#x)[0-9a-fA-F]+|(#o)[0-7]+|(#b)[01]+)(?=[\\\\s;()'\",\\\\[\\\\]])`, \"name\": \"constant.numeric.scheme\" }] }, \"illegal\": { \"match\": \"[()\\\\[\\\\]]\", \"name\": \"invalid.illegal.parenthesis.scheme\" }, \"language-functions\": { \"patterns\": [{ \"match\": \"(?x)\\n(?<=(\\\\s|\\\\(|\\\\[))\\n( do|or|and|else|quasiquote|begin|if|case|set!|\\ncond|let|unquote|define|let\\\\*|unquote-splicing|delay|\\nletrec)\\n(?=(\\\\s|\\\\())\", \"name\": \"keyword.control.scheme\" }, { \"comment\": \"\\n\t\t\t\t\t\tThese functions run a test, and return a boolean\\n\t\t\t\t\t\tanswer.\\n\t\t\t\t\t\", \"match\": \"(?x)\\n(?<=(\\\\s|\\\\())\\n( char-alphabetic|char-lower-case|char-numeric|\\nchar-ready|char-upper-case|char-whitespace|\\n(?:char|string)(?:-ci)?(?:=|<=?|>=?)|\\natom|boolean|bound-identifier=|char|complex|\\nidentifier|integer|symbol|free-identifier=|inexact|\\neof-object|exact|list|(?:input|output)-port|pair|\\nreal|rational|zero|vector|negative|odd|null|string|\\neq|equal|eqv|even|number|positive|procedure\\n)\\n(\\\\?)\\n(?=(\\\\s|\\\\())\\n\", \"name\": \"support.function.boolean-test.scheme\" }, { \"comment\": \"\\n\t\t\t\t\t\tThese functions change one type into another.\\n\t\t\t\t\t\", \"match\": \"(?x)\\n(?<=(\\\\s|\\\\())\\n( char->integer|exact->inexact|inexact->exact|\\ninteger->char|symbol->string|list->vector|\\nlist->string|identifier->symbol|vector->list|\\nstring->list|string->number|string->symbol|\\nnumber->string\\n)\\n(?=(\\\\s|\\\\())\\n\", \"name\": \"support.function.convert-type.scheme\" }, { \"comment\": \"\\n\t\t\t\t\t\tThese functions are potentially dangerous because\\n\t\t\t\t\t\tthey have side-effects which could affect other\\n\t\t\t\t\t\tparts of the program.\\n\t\t\t\t\t\", \"match\": \"(?x)\\n(?<=(\\\\s|\\\\())\\n( set-(?:car|cdr)|\\n(?:vector|string)-(?:fill|set)\\n)\\n(!)\\n(?=(\\\\s|\\\\())\\n\", \"name\": \"support.function.with-side-effects.scheme\" }, { \"comment\": \"\\n\t\t\t\t\t\t+, -, *, /, =, >, etc. \\n\t\t\t\t\t\", \"match\": \"(?x)\\n(?<=(\\\\s|\\\\())\\n( >=?|<=?|=|[*/+-])\\n(?=(\\\\s|\\\\())\\n\", \"name\": \"keyword.operator.arithmetic.scheme\" }, { \"match\": \"(?x)\\n(?<=(\\\\s|\\\\())\\n( append|apply|approximate|\\ncall-with-current-continuation|call/cc|catch|\\nconstruct-identifier|define-syntax|display|foo|\\nfor-each|force|format|cd|gen-counter|gen-loser|\\ngenerate-identifier|last-pair|length|let-syntax|\\nletrec-syntax|list|list-ref|list-tail|load|log|\\nmacro|magnitude|map|map-streams|max|member|memq|\\nmemv|min|newline|nil|not|peek-char|rationalize|\\nread|read-char|return|reverse|sequence|substring|\\nsyntax|syntax-rules|transcript-off|transcript-on|\\ntruncate|unwrap-syntax|values-list|write|write-char|\\n\\n\\ncons|c(a|d){1,4}r|\\n\\n\\nabs|acos|angle|asin|assoc|assq|assv|atan|ceiling|\\ncos|floor|round|sin|sqrt|tan|\\n(?:real|imag)-part|numerator|denominator\\n\\n\\nmodulo|exp|expt|remainder|quotient|lcm|\\n\\n\\ncall-with-(?:input|output)-file|\\n(?:close|current)-(?:input|output)-port|\\nwith-(?:input|output)-from-file|\\nopen-(?:input|output)-file|\\n\\n\\nchar-(?:downcase|upcase|ready)|\\n\\n\\nmake-(?:polar|promise|rectangular|string|vector)\\n\\n\\nstring(?:-(?:append|copy|length|ref))?|\\nvector(?:-length|-ref)\\n)\\n(?=(\\\\s|\\\\())\\n\", \"name\": \"support.function.general.scheme\" }] }, \"quote\": { \"comment\": \"\\n\t\t\t\tWe need to be able to quote any kind of item, which creates\\n\t\t\t\ta tiny bit of complexity in our grammar.  It is hopefully\\n\t\t\t\tnot overwhelming complexity.\\n\t\t\t\t\\n\t\t\t\tNote: the first two matches are special cases.  quoted\\n\t\t\t\tsymbols, and quoted empty lists are considered constant.other\\n\t\t\t\t\\n\t\t\t\", \"patterns\": [{ \"captures\": { \"1\": { \"name\": \"punctuation.section.quoted.symbol.scheme\" } }, \"match\": \"(?x)\\n(')\\\\s*\\n([[:alnum:]][[:alnum:]!$%&*+-./:<=>?@^_~]*)\\n\", \"name\": \"constant.other.symbol.scheme\" }, { \"captures\": { \"1\": { \"name\": \"punctuation.section.quoted.empty-list.scheme\" }, \"2\": { \"name\": \"meta.expression.scheme\" }, \"3\": { \"name\": \"punctuation.section.expression.begin.scheme\" }, \"4\": { \"name\": \"punctuation.section.expression.end.scheme\" } }, \"match\": \"(?x)\\n(')\\\\s*\\n((\\\\()\\\\s*(\\\\)))\\n\", \"name\": \"constant.other.empty-list.schem\" }, { \"begin\": \"(')\\\\s*\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.section.quoted.scheme\" } }, \"comment\": \"quoted double-quoted string or s-expression\", \"end\": \"(?=[\\\\s()])|(?<=\\\\n)\", \"name\": \"string.other.quoted-object.scheme\", \"patterns\": [{ \"include\": \"#quoted\" }] }] }, \"quote-sexp\": { \"begin\": \"(?<=\\\\()\\\\s*(quote)\\\\s+\", \"beginCaptures\": { \"1\": { \"name\": \"keyword.control.quote.scheme\" } }, \"comment\": \"\\n\t\t\t\tSomething quoted with (quote \\xABthing\\xBB).  In this case \\xABthing\\xBB\\n\t\t\t\twill not be evaluated, so we are considering it a string.\\n\t\t\t\", \"contentName\": \"string.other.quote.scheme\", \"end\": \"(?=[\\\\s)])|(?<=\\\\n)\", \"patterns\": [{ \"include\": \"#quoted\" }] }, \"quoted\": { \"patterns\": [{ \"include\": \"#string\" }, { \"begin\": \"(\\\\()\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.section.expression.begin.scheme\" } }, \"end\": \"(\\\\))\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.section.expression.end.scheme\" } }, \"name\": \"meta.expression.scheme\", \"patterns\": [{ \"include\": \"#quoted\" }] }, { \"include\": \"#quote\" }, { \"include\": \"#illegal\" }] }, \"sexp\": { \"begin\": \"(\\\\()\", \"beginCaptures\": { \"1\": { \"name\": \"punctuation.section.expression.begin.scheme\" } }, \"end\": \"(\\\\))(\\\\n)?\", \"endCaptures\": { \"1\": { \"name\": \"punctuation.section.expression.end.scheme\" }, \"2\": { \"name\": \"meta.after-expression.scheme\" } }, \"name\": \"meta.expression.scheme\", \"patterns\": [{ \"include\": \"#comment\" }, { \"begin\": \"(?x)\\n(?<=\\\\()\\n(define)\\\\s+\\n(\\\\()\\n([[:alnum:]][[:alnum:]!$%&*+-./:<=>?@^_~]*)\\n((\\\\s+\\n([[:alnum:]][[:alnum:]!$%&*+-./:<=>?@^_~]*|[._])\\n)*\\n)\\\\s*\\n(\\\\))\\n\", \"captures\": { \"1\": { \"name\": \"keyword.control.scheme\" }, \"2\": { \"name\": \"punctuation.definition.function.scheme\" }, \"3\": { \"name\": \"entity.name.function.scheme\" }, \"4\": { \"name\": \"variable.parameter.function.scheme\" }, \"7\": { \"name\": \"punctuation.definition.function.scheme\" } }, \"end\": \"(?=\\\\))\", \"name\": \"meta.declaration.procedure.scheme\", \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#sexp\" }, { \"include\": \"#illegal\" }] }, { \"begin\": \"(?x)\\n(?<=\\\\()\\n(lambda)\\\\s+\\n(\\\\()\\n((?:\\n([[:alnum:]][[:alnum:]!$%&*+-./:<=>?@^_~]*|[._])\\n\\\\s+\\n)*(?:\\n([[:alnum:]][[:alnum:]!$%&*+-./:<=>?@^_~]*|[._])\\n)?)\\n(\\\\))\\n\", \"captures\": { \"1\": { \"name\": \"keyword.control.scheme\" }, \"2\": { \"name\": \"punctuation.definition.variable.scheme\" }, \"3\": { \"name\": \"variable.parameter.scheme\" }, \"6\": { \"name\": \"punctuation.definition.variable.scheme\" } }, \"comment\": \"\\n\t\t\t\t\t\tNot sure this one is quite correct.  That \\\\s* is\\n\t\t\t\t\t\tparticularly troubling\\n\t\t\t\t\t\", \"end\": \"(?=\\\\))\", \"name\": \"meta.declaration.procedure.scheme\", \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#sexp\" }, { \"include\": \"#illegal\" }] }, { \"begin\": \"(?<=\\\\()(define)\\\\s([[:alnum:]][[:alnum:]!$%&*+-./:<=>?@^_~]*)\\\\s*.*?\", \"captures\": { \"1\": { \"name\": \"keyword.control.scheme\" }, \"2\": { \"name\": \"variable.other.scheme\" } }, \"end\": \"(?=\\\\))\", \"name\": \"meta.declaration.variable.scheme\", \"patterns\": [{ \"include\": \"#comment\" }, { \"include\": \"#sexp\" }, { \"include\": \"#illegal\" }] }, { \"include\": \"#quote-sexp\" }, { \"include\": \"#quote\" }, { \"include\": \"#language-functions\" }, { \"include\": \"#string\" }, { \"include\": \"#constants\" }, { \"match\": \"(?<=[\\\\(\\\\s])(#\\\\\\\\)(space|newline|tab)(?=[\\\\s\\\\)])\", \"name\": \"constant.character.named.scheme\" }, { \"match\": \"(?<=[\\\\(\\\\s])(#\\\\\\\\)x[0-9A-F]{2,4}(?=[\\\\s\\\\)])\", \"name\": \"constant.character.hex-literal.scheme\" }, { \"match\": \"(?<=[\\\\(\\\\s])(#\\\\\\\\).(?=[\\\\s\\\\)])\", \"name\": \"constant.character.escape.scheme\" }, { \"comment\": \"\\n\t\t\t\t\t\tthe . in (a . b) which conses together two elements\\n\t\t\t\t\t\ta and b. (a b c) == (a . (b . (c . nil)))\\n\t\t\t\t\t\", \"match\": \"(?<=[ ()])\\\\.(?=[ ()])\", \"name\": \"punctuation.separator.cons.scheme\" }, { \"include\": \"#sexp\" }, { \"include\": \"#illegal\" }] }, \"string\": { \"begin\": '(\")', \"beginCaptures\": { \"1\": { \"name\": \"punctuation.definition.string.begin.scheme\" } }, \"end\": '(\")', \"endCaptures\": { \"1\": { \"name\": \"punctuation.definition.string.end.scheme\" } }, \"name\": \"string.quoted.double.scheme\", \"patterns\": [{ \"match\": \"\\\\\\\\.\", \"name\": \"constant.character.escape.scheme\" }] } }, \"scopeName\": \"source.scheme\" });\nvar scheme = [\n  lang\n];\n\nexport { scheme as default };\n"],"names":["lang","scheme"],"mappings":"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","x_google_ignoreList":[0]}