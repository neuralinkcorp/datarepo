{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#neuralake-a-simple-platform-for-complex-data","title":"Neuralake: A simple platform for complex data","text":"<p>Neuralake is a simple query interface for multimodal data at any scale. </p> <p>With Neuralake, you can define a catalog, databases, and tables to query any existing data source. Once you've defined your catalog, you can spin up a static site for easy browsing or a read-only API for programmatic access. No running servers or services!</p> <p>The Neuralake client has native, declarative connectors to Delta Lake and Parquet stores. Neuralake also supports defining tables via custom Python functions, so you can connect to any data source!</p>"},{"location":"#key-features","title":"Key features","text":"<ul> <li>Unified interface: Query data across different storage modalities (Parquet, DeltaLake, relational databases)</li> <li>Declarative catalog syntax: Define catalogs in python without running services</li> <li>Catalog site generation: Generate a static site catalog for visual browsing</li> <li>Extensible: Declare tables as custom python functions for querying any data</li> <li>API support: Generate a YAML config for querying with ROAPI</li> <li>Fast: Uses Rust-native libraries such as polars, delta-rs, and Apache DataFusion for performant reads</li> </ul>"},{"location":"#philosophy","title":"Philosophy","text":"<p>Data engineering should be simple. That means:</p> <ol> <li>Scale up and scale down - tools should scale down to a developer's laptop and up to stateless clusters</li> <li>Prioritize local development experience - use composable libraries instead of distributed services</li> <li>Code as a catalog - define tables in code, generate a static site catalog and APIs without running services</li> </ol>"},{"location":"#quick-start","title":"Quick start","text":"<p>Install the latest version with:</p> <pre><code>pip install neuralake\n</code></pre>"},{"location":"#create-a-table-and-catalog","title":"Create a table and catalog","text":"<pre><code>from neuralake.core import (\n    DeltalakeTable,\n    Filter,\n    Catalog\n)\n\n# Define a table\nschema = pa.schema([\n    (\"implant_id\", pa.int64()),\n    (\"date\", pa.date64()),\n    (\"hour\", pa.int8()),\n])\n\nneural_spikes = DeltalakeTable(\n    name=\"my_table\",\n    uri='s3://my-bucket/neural_spikes',\n    schema=schema,\n    # Example filters for auto-generated docs\n    docs_filters=[\n        Filter(\"implant_id\", \"=\", 3770),\n        Filter(\"date\", \"=\", \"2024-08-28\"),\n    ],\n    unique_columns=['implant_id'],\n    description=\"\"\"\n    Neural spikes recorded by a Neuralink implant.\n    This data is published every 10 seconds to a Delta Lake table.\n    \"\"\",\n)\n\n# Create a catalog\ndbs = {\n    \"neural_spikes\": neural_spikes,\n}\n\nMyCatalog = Catalog(dbs)\n</code></pre>"},{"location":"#query-the-data","title":"Query the data","text":"<pre><code>&gt;&gt;&gt; from my_catalogs import MyCatalog\n&gt;&gt;&gt; from neuralake.core import Filter\n&gt;&gt;&gt; \n&gt;&gt;&gt; data = MyCatalog.db(\"neural_spikes\").table(\n...     \"my_table\",\n...     (\n...         Filter('implant_id', '=', 5555),\n...         Filter('date', '=', '2024-09-06'),\n...     ),\n... ).collect()\n&gt;&gt;&gt; \n&gt;&gt;&gt; print(data)\nshape: (3, 50)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 implant_id \u2506 date       \u2506 hour \u2502\n\u2502 ---        \u2506 ---        \u2506 ---  \u2502\n\u2502 i64        \u2506 str        \u2506 i64  \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 5555       \u2506 2024-09-06 \u2506 7    \u2502\n\u2502 5555       \u2506 2024-09-06 \u2506 7    \u2502\n\u2502 \u2026          \u2506 \u2026          \u2506 \u2026    \u2502\n\u2502 5555       \u2506 2024-09-06 \u2506 6    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"#about-neuralink","title":"About Neuralink","text":"<p>Neuralake is part of Neuralink's commitment to the open source community. By maintaining free and open source software, we aim to accelerate data engineering and biotechnology. </p> <p>Neuralink is creating a generalized brain interface to restore autonomy to those with unmet medical needs today, and to unlock human potential tomorrow.</p> <p>You don't have to be a brain surgeon to work at Neuralink. We are looking for exceptional individuals from many fields, including software and data engineering. Learn more at neuralink.com/careers.</p>"},{"location":"catalog/","title":"Web Catalog Example","text":"<p>Open Web Catalog in new tab{target=_blank} </p>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#installation","title":"Installation","text":"<p>Install the latest version of Neuralake using pip:</p> <pre><code>pip install neuralake\n</code></pre>"},{"location":"getting-started/#basic-usage","title":"Basic Usage","text":""},{"location":"getting-started/#creating-a-table","title":"Creating a Table","text":"<p>Neuralake provides several table types for different data sources. Here's how to create a Delta Lake table:</p> <pre><code>from neuralake.core import DeltalakeTable, Filter\n\n# Define a schema\nschema = {\n    \"implant_id\": \"i64\",\n    \"date\": \"str\",\n    \"hour\": \"i64\",\n    \"spike_count\": \"i64\"\n}\n\n# Create a table\nneural_spikes = DeltalakeTable(\n    name=\"neural_spikes\",\n    uri='s3://my-bucket/neural_spikes',\n    schema=schema,\n    docs_filters=[\n        Filter(\"implant_id\", \"=\", 3770),\n        Filter(\"date\", \"=\", \"2024-08-28\"),\n    ],\n    unique_columns=['implant_id'],\n    description=\"Neural spikes recorded by a Neuralink implant.\"\n)\n</code></pre>"},{"location":"getting-started/#creating-a-catalog","title":"Creating a Catalog","text":"<p>A catalog is a collection of tables that can be queried together:</p> <pre><code>from neuralake.core import Catalog\n\n# Create a catalog\ndbs = {\n    \"neural_spikes\": neural_spikes,\n}\n\nMyCatalog = Catalog(dbs)\n</code></pre>"},{"location":"getting-started/#querying-data","title":"Querying Data","text":"<p>Once you have a catalog, you can query the data using filters:</p> <pre><code>from neuralake.core import Filter\n\n# Query the data\ndata = MyCatalog.db(\"neural_spikes\").table(\n    \"neural_spikes\",\n    (\n        Filter('implant_id', '=', 5555),\n        Filter('date', '=', '2024-09-06'),\n    ),\n).collect()\n\nprint(data)\n</code></pre>"},{"location":"getting-started/#generating-documentation","title":"Generating Documentation","text":"<p>Neuralake can generate documentation for your catalog:</p> <pre><code>from neuralake import web_export\n\n# Generate documentation\nweb_export.generate_docs(MyCatalog, output_dir=\"docs\")\n</code></pre>"},{"location":"getting-started/#api-configuration","title":"API Configuration","text":"<p>You can also generate a YAML configuration for ROAPI:</p> <pre><code>from neuralake import roapi_export\n\n# Generate ROAPI config\nroapi_export.generate_config(MyCatalog, output_file=\"roapi-config.yaml\")\n</code></pre>"},{"location":"user-guide/","title":"User Guide","text":""},{"location":"user-guide/#core-concepts","title":"Core concepts","text":""},{"location":"user-guide/#tables","title":"Tables","text":"<p>A table in Neuralake is a Python function that returns an <code>NlkDataFrame</code>. An <code>NlkDataFrame</code> is a thin wrapper of the polars LazyFrame. Tables are the fundamental building blocks for accessing and querying data. Tables can be backed by DeltaLake tables, Parquet tables, or pure Python functions.</p>"},{"location":"user-guide/#deltalake-tables","title":"DeltaLake tables","text":"<p>DeltaLake tables provide efficient access to DeltaLake tables:</p> <pre><code>from neuralake.core.tables import DeltalakeTable\nimport pyarrow as pa\n\n# Define the schema\nschema = pa.schema([\n    (\"timestamp\", pa.timestamp(\"ns\")),\n    (\"value\", pa.float64()),\n])\n\n# Create the table\nspikes = DeltalakeTable(\n    name=\"spikes\",\n    uri=\"s3://my-bucket/spikes\",\n    schema=schema,\n    description=\"Neural spike data\",\n    unique_columns=[\"timestamp\"],\n)\n</code></pre>"},{"location":"user-guide/#parquet-tables","title":"Parquet tables","text":"<p>Allow for querying parquet data:</p> <pre><code>from neuralake.core.tables import ParquetTable, Partition, PartitioningScheme\n\n# Define partitions\npartitions = [\n    Partition(\"date\", str),\n    Partition(\"subject_id\", str),\n]\n\n# Create the table\nspikes = ParquetTable(\n    name=\"spikes\",\n    uri=\"s3://my-bucket/spikes\",\n    partitioning=partitions,\n    partitioning_scheme=PartitioningScheme.HIVE,\n    description=\"Neural spike data\",\n)\n</code></pre>"},{"location":"user-guide/#function-tables","title":"Function tables","text":"<p>Function tables are created using the <code>@table</code> decorator and allow you to define custom data access logic:</p> <pre><code>from neuralake.core.tables import table\nimport polars as pl\n\n@table\ndef my_custom_table() -&gt; NlkDataFrame:\n    \"\"\"A custom table that returns data from any source.\"\"\"\n    # Create a sample dataframe with neural spike data\n    data = {\n        \"timestamp\": [\"2024-01-01\", \"2024-01-01\", \"2024-01-01\", \"2024-01-01\", \"2024-01-01\"],\n        \"value\": [0.123, 0.456, 0.789, 0.321, 0.654],\n        \"channel\": [1, 2, 3, 4, 5]\n    }\n    return NlkDataFrame(frame=pl.LazyFrame(data))\n</code></pre>"},{"location":"user-guide/#databases","title":"Databases","text":"<p>A Neuralake database is a Python module that contains tables. There are two main ways to create databases:</p>"},{"location":"user-guide/#module-database","title":"Module database","text":"<p>A module database wraps a Python module containing table definitions:</p> <pre><code># my_database.py\nfrom neuralake.core.tables import table\n\n@table\ndef spikes():\n    \"\"\"Neural spike data.\"\"\"\n    return NlkDataFrame(...)\n\n@table\ndef events():\n    \"\"\"Behavioral events.\"\"\"\n    return NlkDataFrame(...)\n\n# Using the database\nfrom neuralake.core.catalog import ModuleDatabase\nimport my_database\n\ndb = ModuleDatabase(my_database)\n\n# Query data\n&gt;&gt;&gt; df = db.spikes()\n&gt;&gt;&gt; df.head()\nshape: (5, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 timestamp  \u2502 value   \u2502 channel \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 2024-01-01 \u2502 0.123   \u2502 1       \u2502\n\u2502 2024-01-01 \u2502 0.456   \u2502 2       \u2502\n\u2502 2024-01-01 \u2502 0.789   \u2502 3       \u2502\n\u2502 2024-01-01 \u2502 0.321   \u2502 4       \u2502\n\u2502 2024-01-01 \u2502 0.654   \u2502 5       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/#custom-database","title":"Custom database","text":"<p>You can also create custom databases by implementing the <code>Database</code> protocol:</p> <pre><code>from neuralake.core.catalog import Database, TableProtocol\n\nclass MyDatabase(Database):\n    def __init__(self):\n        self._tables = {\n            \"spikes\": DeltalakeTable(...),\n            \"events\": ParquetTable(...),\n        }\n\n    def get_tables(self, show_deprecated: bool = False) -&gt; dict[str, TableProtocol]:\n        return self._tables\n\n    def table(self, name: str, *args, **kwargs) -&gt; NlkDataFrame:\n        return self._tables[name](*args, **kwargs)\n</code></pre>"},{"location":"user-guide/#catalogs","title":"Catalogs","text":"<p>A catalog in Neuralake is a Python module that is a collection of databases. It provides a unified interface to access data across multiple databases:</p> <pre><code>from neuralake.core.catalog import Catalog, ModuleDatabase\nimport neural_spikes\nimport behavioral_data\n\n# Create a catalog\ndbs = {\n    \"neural_spikes\": ModuleDatabase(neural_spikes),\n    \"behavioral_data\": ModuleDatabase(behavioral_data),\n}\n\nMyCatalog = Catalog(dbs)\n\n# Query data across databases\n&gt;&gt;&gt; spikes = MyCatalog.db(\"neural_spikes\").spikes()\n&gt;&gt;&gt; events = MyCatalog.db(\"behavioral_data\").events()\n\n# Join data across databases\n&gt;&gt;&gt; joined = spikes.join(events, on=\"timestamp\")\n&gt;&gt;&gt; joined.head()\nshape: (5, 5)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 timestamp  \u2502 value   \u2502 channel \u2502 event   \u2502 event_time \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 2024-01-01 \u2502 0.123   \u2502 1       \u2502 start   \u2502 2024-01-01 \u2502\n\u2502 2024-01-01 \u2502 0.456   \u2502 2       \u2502 start   \u2502 2024-01-01 \u2502\n\u2502 2024-01-01 \u2502 0.789   \u2502 3       \u2502 stop    \u2502 2024-01-01 \u2502\n\u2502 2024-01-01 \u2502 0.321   \u2502 4       \u2502 stop    \u2502 2024-01-01 \u2502\n\u2502 2024-01-01 \u2502 0.654   \u2502 5       \u2502 start   \u2502 2024-01-01 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/#querying-data","title":"Querying data","text":"<p>Neuralake provides a consistent interface for querying data across all table types:</p> <pre><code># Basic query\n&gt;&gt;&gt; df = db.spikes()\n\n# Filter data\n&gt;&gt;&gt; df = db.spikes(filters=[(\"channel\", \"=\", 1)])\n\n# Select columns\n&gt;&gt;&gt; df = db.spikes(columns=[\"timestamp\", \"value\"])\n\n# Complex queries\n&gt;&gt;&gt; df = db.spikes(\n...     filters=[\n...         (\"channel\", \"=\", 1),\n...         (\"timestamp\", \"&gt;=\", \"2024-01-01\"),\n...     ],\n...     columns=[\"timestamp\", \"value\"],\n... )\n</code></pre>"},{"location":"user-guide/#advanced-features","title":"Advanced features","text":""},{"location":"user-guide/#caching","title":"Caching","text":"<p>DeltaLake tables support caching to improve performance:</p> <pre><code>from neuralake.core.tables import DeltaCacheOptions\n\n# Configure caching\ncache_options = DeltaCacheOptions(\n    file_cache_path=\"~/.neuralake/cache\",\n    file_cache_last_checkpoint_valid_duration=\"30m\",\n)\n\n# Use caching\n&gt;&gt;&gt; df = db.spikes(cache_options=cache_options)\n</code></pre>"},{"location":"user-guide/#custom-columns","title":"Custom columns","text":"<p>You can add custom computed columns to tables:</p> <pre><code># Add a custom column\nspikes = DeltalakeTable(\n    name=\"spikes\",\n    uri=\"s3://my-bucket/spikes\",\n    schema=schema,\n    extra_cols=[\n        (pl.col(\"value\") * 1000, \"value_mv\"),\n    ],\n)\n\n# Query with custom column\n&gt;&gt;&gt; df = spikes(columns=[\"timestamp\", \"value_mv\"])\n</code></pre>"}]}